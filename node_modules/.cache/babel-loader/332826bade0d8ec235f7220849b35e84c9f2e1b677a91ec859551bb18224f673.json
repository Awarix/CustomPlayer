{"ast":null,"code":"var _jsxFileName = \"/home/gleb/my_app_test/src/audio/AudioWaveform.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WaveformContainer = styled.div`\n  width: 100%;\n  height: 100px;\n  position: relative;\n  background-color: #f1f3f4;\n  border-radius: 4px;\n  overflow: hidden;\n  cursor: pointer;\n`;\n_c = WaveformContainer;\nconst WaveformCanvas = styled.canvas`\n  width: 100%;\n  height: 100%;\n  background-color: #f4h2a1;\n`;\n_c2 = WaveformCanvas;\nconst ProgressOverlay = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: ${props => props.progress}%;\n  background-color: rgba(255, 85, 0, 0.2);\n  pointer-events: none;\n`;\n_c3 = ProgressOverlay;\nconst AudioWaveform = ({\n  audioUrl,\n  currentTime,\n  duration,\n  isPlaying,\n  onSeek,\n  onPlayPause\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const containerRef = useRef(null);\n  const [waveformData, setWaveformData] = useState([]);\n  useEffect(() => {\n    if (audioUrl) {\n      fetchAudioAndComputeWaveform(audioUrl);\n    }\n  }, [audioUrl]);\n  useEffect(() => {\n    drawWaveform();\n  }, [waveformData, currentTime]);\n  const fetchAudioAndComputeWaveform = async url => {\n    try {\n      const response = await fetch(url);\n      const arrayBuffer = await response.arrayBuffer();\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n      const waveform = computeWaveform(audioBuffer);\n      setWaveformData(waveform !== null && waveform !== void 0 ? waveform : []);\n    } catch (error) {\n      console.error('Error fetching audio:', error);\n    }\n  };\n  const computeWaveform = audioBuffer => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const channelData = audioBuffer.getChannelData(0);\n    const samples = 500;\n    const blockSize = Math.floor(channelData.length / canvas.width);\n    const waveform = [];\n    for (let i = 0; i < samples; i++) {\n      const start = i * blockSize;\n      const end = start + blockSize;\n      let max = 0;\n      for (let j = start; j < end; j++) {\n        const amplitude = Math.abs(channelData[j]);\n        if (amplitude > max) {\n          max = amplitude;\n        }\n      }\n      waveform.push(max);\n    }\n    return waveform;\n  };\n  const drawWaveform = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    const width = canvas.width;\n    const height = canvas.height;\n    const barWidth = width / waveformData.length;\n    ctx.clearRect(0, 0, width, height);\n    waveformData.forEach((value, index) => {\n      const x = index * barWidth;\n      const barHeight = value * height;\n      ctx.fillStyle = currentTime / duration > index / waveformData.length ? '#ff5500' : '#999';\n      ctx.fillRect(x, (height - barHeight) / 2, barWidth - 1, barHeight);\n    });\n  };\n  const handleClick = e => {\n    if (!containerRef.current) return;\n    const rect = containerRef.current.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const seekTime = x / rect.width * duration;\n    onSeek(seekTime);\n  };\n  const handleDoubleClick = () => {\n    onPlayPause();\n  };\n  return /*#__PURE__*/_jsxDEV(WaveformContainer, {\n    ref: containerRef,\n    onClick: handleClick,\n    onDoubleClick: handleDoubleClick,\n    children: [/*#__PURE__*/_jsxDEV(WaveformCanvas, {\n      ref: canvasRef,\n      width: 1000,\n      height: 200\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ProgressOverlay, {\n      progress: currentTime / duration * 100\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioWaveform, \"idEwfCrQfR6Y0tTahrjrZywGyFw=\");\n_c4 = AudioWaveform;\nexport default AudioWaveform;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"WaveformContainer\");\n$RefreshReg$(_c2, \"WaveformCanvas\");\n$RefreshReg$(_c3, \"ProgressOverlay\");\n$RefreshReg$(_c4, \"AudioWaveform\");","map":{"version":3,"names":["React","useRef","useEffect","useState","styled","jsxDEV","_jsxDEV","WaveformContainer","div","_c","WaveformCanvas","canvas","_c2","ProgressOverlay","props","progress","_c3","AudioWaveform","audioUrl","currentTime","duration","isPlaying","onSeek","onPlayPause","_s","canvasRef","containerRef","waveformData","setWaveformData","fetchAudioAndComputeWaveform","drawWaveform","url","response","fetch","arrayBuffer","audioContext","window","AudioContext","webkitAudioContext","audioBuffer","decodeAudioData","waveform","computeWaveform","error","console","current","channelData","getChannelData","samples","blockSize","Math","floor","length","width","i","start","end","max","j","amplitude","abs","push","ctx","getContext","height","barWidth","clearRect","forEach","value","index","x","barHeight","fillStyle","fillRect","handleClick","e","rect","getBoundingClientRect","clientX","left","seekTime","handleDoubleClick","ref","onClick","onDoubleClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c4","$RefreshReg$"],"sources":["/home/gleb/my_app_test/src/audio/AudioWaveform.tsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\nconst WaveformContainer = styled.div`\n  width: 100%;\n  height: 100px;\n  position: relative;\n  background-color: #f1f3f4;\n  border-radius: 4px;\n  overflow: hidden;\n  cursor: pointer;\n`;\n\nconst WaveformCanvas = styled.canvas`\n  width: 100%;\n  height: 100%;\n  background-color: #f4h2a1;\n`;\n\nconst ProgressOverlay = styled.div<{ progress: number }>`\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: ${props => props.progress}%;\n  background-color: rgba(255, 85, 0, 0.2);\n  pointer-events: none;\n`;\n\ninterface AudioWaveformProps {\n  audioUrl: string;\n  currentTime: number;\n  duration: number;\n  isPlaying: boolean;\n  onSeek: (time: number) => void;\n  onPlayPause: () => void;\n}\n\nconst AudioWaveform: React.FC<AudioWaveformProps> = ({\n  audioUrl,\n  currentTime,\n  duration,\n  isPlaying,\n  onSeek,\n  onPlayPause\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [waveformData, setWaveformData] = useState<number[]>([]);\n\n  useEffect(() => {\n    if (audioUrl) {\n      fetchAudioAndComputeWaveform(audioUrl);\n    }\n  }, [audioUrl]);\n\n  useEffect(() => {\n    drawWaveform();\n  }, [waveformData, currentTime]);\n\n  const fetchAudioAndComputeWaveform = async (url: string) => {\n    try {\n      const response = await fetch(url);\n      const arrayBuffer = await response.arrayBuffer();\n      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n      const waveform = computeWaveform(audioBuffer);\n      setWaveformData(waveform ?? []);\n    } catch (error) {\n      console.error('Error fetching audio:', error);\n    }\n  };\n\n  const computeWaveform = (audioBuffer: AudioBuffer) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    \n    const channelData = audioBuffer.getChannelData(0);\n    const samples = 500;\n    const blockSize = Math.floor(channelData.length / canvas.width);\n    const waveform = [];\n\n    for (let i = 0; i < samples; i++) {\n      const start = i * blockSize;\n      const end = start + blockSize;\n      let max = 0;\n      for (let j = start; j < end; j++) {\n        const amplitude = Math.abs(channelData[j]);\n        if (amplitude > max) {\n          max = amplitude;\n        }\n      }\n      waveform.push(max);\n    }\n\n    return waveform;\n  };\n\n  const drawWaveform = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    const width = canvas.width;\n    const height = canvas.height;\n    const barWidth = width / waveformData.length;\n\n    ctx.clearRect(0, 0, width, height);\n\n    waveformData.forEach((value, index) => {\n      const x = index * barWidth;\n      const barHeight = value * height;\n\n      ctx.fillStyle = currentTime / duration > index / waveformData.length ? '#ff5500' : '#999';\n      ctx.fillRect(x, (height - barHeight) / 2, barWidth - 1, barHeight);\n    });\n  };\n\n  const handleClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (!containerRef.current) return;\n    const rect = containerRef.current.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const seekTime = (x / rect.width) * duration;\n    onSeek(seekTime);\n  };\n\n  const handleDoubleClick = () => {\n    onPlayPause();\n  };\n\n  return (\n    <WaveformContainer \n      ref={containerRef} \n      onClick={handleClick} \n      onDoubleClick={handleDoubleClick}\n    >\n      <WaveformCanvas ref={canvasRef} width={1000} height={200} />\n      <ProgressOverlay progress={(currentTime / duration) * 100} />\n    </WaveformContainer>\n  );\n};\n\nexport default AudioWaveform;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}