{"ast":null,"code":"import { Node, mergeAttributes, Mark, getMarkAttributes, wrappingInputRule } from '@tiptap/core';\nconst ListItem = Node.create({\n  name: 'listItem',\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n      bulletListTypeName: 'bulletList',\n      orderedListTypeName: 'orderedList'\n    };\n  },\n  content: 'paragraph block*',\n  defining: true,\n  parseHTML() {\n    return [{\n      tag: 'li'\n    }];\n  },\n  renderHTML({\n    HTMLAttributes\n  }) {\n    return ['li', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addKeyboardShortcuts() {\n    return {\n      Enter: () => this.editor.commands.splitListItem(this.name),\n      Tab: () => this.editor.commands.sinkListItem(this.name),\n      'Shift-Tab': () => this.editor.commands.liftListItem(this.name)\n    };\n  }\n});\nconst TextStyle = Mark.create({\n  name: 'textStyle',\n  addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  parseHTML() {\n    return [{\n      tag: 'span',\n      getAttrs: element => {\n        const hasStyles = element.hasAttribute('style');\n        if (!hasStyles) {\n          return false;\n        }\n        return {};\n      }\n    }];\n  },\n  renderHTML({\n    HTMLAttributes\n  }) {\n    return ['span', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands() {\n    return {\n      removeEmptyTextStyle: () => ({\n        state,\n        commands\n      }) => {\n        const attributes = getMarkAttributes(state, this.type);\n        const hasStyles = Object.entries(attributes).some(([, value]) => !!value);\n        if (hasStyles) {\n          return true;\n        }\n        return commands.unsetMark(this.name);\n      }\n    };\n  }\n});\nconst inputRegex = /^(\\d+)\\.\\s$/;\nconst OrderedList = Node.create({\n  name: 'orderedList',\n  addOptions() {\n    return {\n      itemTypeName: 'listItem',\n      HTMLAttributes: {},\n      keepMarks: false,\n      keepAttributes: false\n    };\n  },\n  group: 'block list',\n  content() {\n    return `${this.options.itemTypeName}+`;\n  },\n  addAttributes() {\n    return {\n      start: {\n        default: 1,\n        parseHTML: element => {\n          return element.hasAttribute('start') ? parseInt(element.getAttribute('start') || '', 10) : 1;\n        }\n      }\n    };\n  },\n  parseHTML() {\n    return [{\n      tag: 'ol'\n    }];\n  },\n  renderHTML({\n    HTMLAttributes\n  }) {\n    const {\n      start,\n      ...attributesWithoutStart\n    } = HTMLAttributes;\n    return start === 1 ? ['ol', mergeAttributes(this.options.HTMLAttributes, attributesWithoutStart), 0] : ['ol', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands() {\n    return {\n      toggleOrderedList: () => ({\n        commands,\n        chain\n      }) => {\n        if (this.options.keepAttributes) {\n          return chain().toggleList(this.name, this.options.itemTypeName, this.options.keepMarks).updateAttributes(ListItem.name, this.editor.getAttributes(TextStyle.name)).run();\n        }\n        return commands.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks);\n      }\n    };\n  },\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-7': () => this.editor.commands.toggleOrderedList()\n    };\n  },\n  addInputRules() {\n    let inputRule = wrappingInputRule({\n      find: inputRegex,\n      type: this.type,\n      getAttributes: match => ({\n        start: +match[1]\n      }),\n      joinPredicate: (match, node) => node.childCount + node.attrs.start === +match[1]\n    });\n    if (this.options.keepMarks || this.options.keepAttributes) {\n      inputRule = wrappingInputRule({\n        find: inputRegex,\n        type: this.type,\n        keepMarks: this.options.keepMarks,\n        keepAttributes: this.options.keepAttributes,\n        getAttributes: match => ({\n          start: +match[1],\n          ...this.editor.getAttributes(TextStyle.name)\n        }),\n        joinPredicate: (match, node) => node.childCount + node.attrs.start === +match[1],\n        editor: this.editor\n      });\n    }\n    return [inputRule];\n  }\n});\nexport { OrderedList, OrderedList as default, inputRegex };","map":{"version":3,"names":["ListItem","Node","create","name","addOptions","HTMLAttributes","bulletListTypeName","orderedListTypeName","content","defining","parseHTML","tag","renderHTML","mergeAttributes","options","addKeyboardShortcuts","Enter","editor","commands","splitListItem","Tab","sinkListItem","Shift-Tab","liftListItem","TextStyle","Mark","getAttrs","element","hasStyles","hasAttribute","addCommands","removeEmptyTextStyle","state","attributes","getMarkAttributes","type","Object","entries","some","value","unsetMark","inputRegex","OrderedList","itemTypeName","keepMarks","keepAttributes","group","addAttributes","start","default","parseInt","getAttribute","attributesWithoutStart","toggleOrderedList","chain","toggleList","updateAttributes","getAttributes","run","Mod-Shift-7","addInputRules","inputRule","wrappingInputRule","find","match","joinPredicate","node","childCount","attrs"],"sources":["/home/gleb/my_app_test/node_modules/@tiptap/extension-list-item/src/list-item.ts","/home/gleb/my_app_test/node_modules/@tiptap/extension-text-style/src/text-style.ts","/home/gleb/my_app_test/node_modules/@tiptap/extension-ordered-list/src/ordered-list.ts"],"sourcesContent":["import { mergeAttributes, Node } from '@tiptap/core'\n\nexport interface ListItemOptions {\n  HTMLAttributes: Record<string, any>,\n  bulletListTypeName: string\n  orderedListTypeName: string\n}\n\nexport const ListItem = Node.create<ListItemOptions>({\n  name: 'listItem',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n      bulletListTypeName: 'bulletList',\n      orderedListTypeName: 'orderedList',\n    }\n  },\n\n  content: 'paragraph block*',\n\n  defining: true,\n\n  parseHTML() {\n    return [\n      {\n        tag: 'li',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['li', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      Enter: () => this.editor.commands.splitListItem(this.name),\n      Tab: () => this.editor.commands.sinkListItem(this.name),\n      'Shift-Tab': () => this.editor.commands.liftListItem(this.name),\n    }\n  },\n})\n","import {\n  getMarkAttributes,\n  Mark,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface TextStyleOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    textStyle: {\n      /**\n       * Remove spans without inline style attributes.\n       */\n      removeEmptyTextStyle: () => ReturnType,\n    }\n  }\n}\n\nexport const TextStyle = Mark.create<TextStyleOptions>({\n  name: 'textStyle',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'span',\n        getAttrs: element => {\n          const hasStyles = (element as HTMLElement).hasAttribute('style')\n\n          if (!hasStyles) {\n            return false\n          }\n\n          return {}\n        },\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['span', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      removeEmptyTextStyle: () => ({ state, commands }) => {\n        const attributes = getMarkAttributes(state, this.type)\n        const hasStyles = Object.entries(attributes).some(([, value]) => !!value)\n\n        if (hasStyles) {\n          return true\n        }\n\n        return commands.unsetMark(this.name)\n      },\n    }\n  },\n\n})\n","import { mergeAttributes, Node, wrappingInputRule } from '@tiptap/core'\n\nimport ListItem from '../../extension-list-item/src/index.js'\nimport TextStyle from '../../extension-text-style/src/index.js'\n\nexport interface OrderedListOptions {\n  itemTypeName: string,\n  HTMLAttributes: Record<string, any>,\n  keepMarks: boolean,\n  keepAttributes: boolean,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    orderedList: {\n      /**\n       * Toggle an ordered list\n       */\n      toggleOrderedList: () => ReturnType,\n    }\n  }\n}\n\nexport const inputRegex = /^(\\d+)\\.\\s$/\n\nexport const OrderedList = Node.create<OrderedListOptions>({\n  name: 'orderedList',\n\n  addOptions() {\n    return {\n      itemTypeName: 'listItem',\n      HTMLAttributes: {},\n      keepMarks: false,\n      keepAttributes: false,\n    }\n  },\n\n  group: 'block list',\n\n  content() {\n    return `${this.options.itemTypeName}+`\n  },\n\n  addAttributes() {\n    return {\n      start: {\n        default: 1,\n        parseHTML: element => {\n          return element.hasAttribute('start')\n            ? parseInt(element.getAttribute('start') || '', 10)\n            : 1\n        },\n      },\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'ol',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    const { start, ...attributesWithoutStart } = HTMLAttributes\n\n    return start === 1\n      ? ['ol', mergeAttributes(this.options.HTMLAttributes, attributesWithoutStart), 0]\n      : ['ol', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      toggleOrderedList: () => ({ commands, chain }) => {\n        if (this.options.keepAttributes) {\n          return chain().toggleList(this.name, this.options.itemTypeName, this.options.keepMarks).updateAttributes(ListItem.name, this.editor.getAttributes(TextStyle.name)).run()\n        }\n        return commands.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-7': () => this.editor.commands.toggleOrderedList(),\n    }\n  },\n\n  addInputRules() {\n    let inputRule = wrappingInputRule({\n      find: inputRegex,\n      type: this.type,\n      getAttributes: match => ({ start: +match[1] }),\n      joinPredicate: (match, node) => node.childCount + node.attrs.start === +match[1],\n    })\n\n    if (this.options.keepMarks || this.options.keepAttributes) {\n      inputRule = wrappingInputRule({\n        find: inputRegex,\n        type: this.type,\n        keepMarks: this.options.keepMarks,\n        keepAttributes: this.options.keepAttributes,\n        getAttributes: match => ({ start: +match[1], ...this.editor.getAttributes(TextStyle.name) }),\n        joinPredicate: (match, node) => node.childCount + node.attrs.start === +match[1],\n        editor: this.editor,\n      })\n    }\n    return [\n      inputRule,\n    ]\n  },\n})\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}