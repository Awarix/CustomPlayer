{"ast":null,"code":"var _jsxFileName = \"/home/gleb/my_app_test/src/audio/audioPlayerV3/test.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TestChannelPlayer = ({\n  src\n}) => {\n  _s();\n  const audioRef = useRef(null);\n  const audioContextRef = useRef(null);\n  const sourceRef = useRef(null);\n  const initializeAudioContext = () => {\n    if (!audioContextRef.current && audioRef.current) {\n      const context = new AudioContext();\n      audioContextRef.current = context;\n      sourceRef.current = context.createMediaElementSource(audioRef.current);\n    }\n  };\n  const playChannel = (leftGainValue, rightGainValue) => {\n    initializeAudioContext();\n    const audio = audioRef.current;\n    const context = audioContextRef.current;\n    if (audio && context && sourceRef.current) {\n      audio.pause();\n      audio.currentTime = 0;\n      const splitter = context.createChannelSplitter(2);\n      const merger = context.createChannelMerger(2);\n      const leftGain = context.createGain();\n      const rightGain = context.createGain();\n      leftGain.gain.value = leftGainValue;\n      rightGain.gain.value = rightGainValue;\n      sourceRef.current.connect(splitter);\n      splitter.connect(leftGain, 0);\n      splitter.connect(rightGain, 1);\n      leftGain.connect(merger, 0, 0);\n      rightGain.connect(merger, 0, 1);\n      merger.connect(context.destination);\n      audio.play();\n    }\n  };\n  const playLeftChannel = () => {\n    playChannel(1, 0);\n  };\n  const playRightChannel = () => {\n    playChannel(0, 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      src: src,\n      controls: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: playLeftChannel,\n        children: \"Play Left Channel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: playRightChannel,\n        children: \"Play Right Channel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(TestChannelPlayer, \"labXKxLTMwrAQuxSSWuZe/3RfQ8=\");\n_c = TestChannelPlayer;\nexport default TestChannelPlayer;\nvar _c;\n$RefreshReg$(_c, \"TestChannelPlayer\");","map":{"version":3,"names":["React","useRef","jsxDEV","_jsxDEV","TestChannelPlayer","src","_s","audioRef","audioContextRef","sourceRef","initializeAudioContext","current","context","AudioContext","createMediaElementSource","playChannel","leftGainValue","rightGainValue","audio","pause","currentTime","splitter","createChannelSplitter","merger","createChannelMerger","leftGain","createGain","rightGain","gain","value","connect","destination","play","playLeftChannel","playRightChannel","children","ref","controls","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/gleb/my_app_test/src/audio/audioPlayerV3/test.tsx"],"sourcesContent":["import React, { useRef } from 'react';\n\ninterface AudioPlayerProps {\n  src: string;\n}\n\nconst TestChannelPlayer: React.FC<AudioPlayerProps> = ({ src }) => {\n  const audioRef = useRef<HTMLAudioElement>(null);\n  const audioContextRef = useRef<AudioContext | null>(null);\n  const sourceRef = useRef<MediaElementAudioSourceNode | null>(null);\n\n  const initializeAudioContext = () => {\n    if (!audioContextRef.current && audioRef.current) {\n      const context = new AudioContext();\n      audioContextRef.current = context;\n      sourceRef.current = context.createMediaElementSource(audioRef.current);\n    }\n  };\n\n  const playChannel = (leftGainValue: number, rightGainValue: number) => {\n    initializeAudioContext();\n\n    const audio = audioRef.current;\n    const context = audioContextRef.current;\n    if (audio && context && sourceRef.current) {\n      audio.pause();\n      audio.currentTime = 0;\n\n      const splitter = context.createChannelSplitter(2);\n      const merger = context.createChannelMerger(2);\n\n      const leftGain = context.createGain();\n      const rightGain = context.createGain();\n\n      leftGain.gain.value = leftGainValue;\n      rightGain.gain.value = rightGainValue;\n\n      sourceRef.current.connect(splitter);\n      splitter.connect(leftGain, 0);\n      splitter.connect(rightGain, 1);\n\n      leftGain.connect(merger, 0, 0);\n      rightGain.connect(merger, 0, 1);\n\n      merger.connect(context.destination);\n\n      audio.play();\n    }\n  };\n\n  const playLeftChannel = () => {\n    playChannel(1, 0);\n  };\n\n  const playRightChannel = () => {\n    playChannel(0, 1);\n  };\n\n  return (\n    <div>\n      <audio ref={audioRef} src={src} controls />\n      <div>\n        <button onClick={playLeftChannel}>Play Left Channel</button>\n        <button onClick={playRightChannel}>Play Right Channel</button>\n      </div>\n    </div>\n  );\n};\n\nexport default TestChannelPlayer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}