{"ast":null,"code":"var _jsxFileName = \"/home/gleb/my_app_test/src/components/FontButton.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FontButton = () => {\n  _s();\n  const [selectedFont, setSelectedFont] = useState('Roboto');\n  const handleFontChange = e => {\n    setSelectedFont(e.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"fontSelect\",\n      children: \"Select Font:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"fontSelect\",\n      value: selectedFont,\n      onChange: handleFontChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Inter\",\n        children: \"Inter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Comic Sans MS, Comic Sans\",\n        children: \"Comic Sans\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"serif\",\n        children: \"serif\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"monospace\",\n        children: \"monospace\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"cursive\",\n        children: \"cursive\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Roboto\",\n        children: \"Default\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }, this);\n};\n_s(FontButton, \"PMF1hVzbAg+6GtOIKn4KLOqoT6A=\");\n_c = FontButton;\nexport default FontButton;\nvar _c;\n$RefreshReg$(_c, \"FontButton\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","FontButton","_s","selectedFont","setSelectedFont","handleFontChange","e","target","value","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","onChange","_c","$RefreshReg$"],"sources":["/home/gleb/my_app_test/src/components/FontButton.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\nconst FontButton = () => {\n    const [selectedFont, setSelectedFont] = useState('Roboto');\n\n    const handleFontChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        setSelectedFont(e.target.value);\n    };\n\n    return (\n        <div>\n            <label htmlFor=\"fontSelect\">Select Font:</label>\n            <select id=\"fontSelect\" value={selectedFont} onChange={handleFontChange}>\n                <option value=\"Inter\">Inter</option>\n                <option value=\"Comic Sans MS, Comic Sans\">Comic Sans</option>\n                <option value=\"serif\">serif</option>\n                <option value=\"monospace\">monospace</option>\n                <option value=\"cursive\">cursive</option>\n                <option value=\"Roboto\">Default</option>\n            </select>\n        </div>\n    );\n};\n\nexport default FontButton;\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGN,QAAQ,CAAC,QAAQ,CAAC;EAE1D,MAAMO,gBAAgB,GAAIC,CAAuC,IAAK;IAClEF,eAAe,CAACE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EACnC,CAAC;EAED,oBACIR,OAAA;IAAAS,QAAA,gBACIT,OAAA;MAAOU,OAAO,EAAC,YAAY;MAAAD,QAAA,EAAC;IAAY;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eAChDd,OAAA;MAAQe,EAAE,EAAC,YAAY;MAACP,KAAK,EAAEL,YAAa;MAACa,QAAQ,EAAEX,gBAAiB;MAAAI,QAAA,gBACpET,OAAA;QAAQQ,KAAK,EAAC,OAAO;QAAAC,QAAA,EAAC;MAAK;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACpCd,OAAA;QAAQQ,KAAK,EAAC,2BAA2B;QAAAC,QAAA,EAAC;MAAU;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC7Dd,OAAA;QAAQQ,KAAK,EAAC,OAAO;QAAAC,QAAA,EAAC;MAAK;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACpCd,OAAA;QAAQQ,KAAK,EAAC,WAAW;QAAAC,QAAA,EAAC;MAAS;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC5Cd,OAAA;QAAQQ,KAAK,EAAC,SAAS;QAAAC,QAAA,EAAC;MAAO;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACxCd,OAAA;QAAQQ,KAAK,EAAC,QAAQ;QAAAC,QAAA,EAAC;MAAO;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEd,CAAC;AAACZ,EAAA,CApBID,UAAU;AAAAgB,EAAA,GAAVhB,UAAU;AAsBhB,eAAeA,UAAU;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}