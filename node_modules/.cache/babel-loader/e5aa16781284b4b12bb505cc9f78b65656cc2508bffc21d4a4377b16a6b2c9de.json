{"ast":null,"code":"var _jsxFileName = \"/home/gleb/my_app_test/src/audio/AudioPlayer.tsx\",\n  _s = $RefreshSig$();\n// AudioPlayer.tsx\nimport React, { useRef, useEffect, useState } from 'react';\nimport { useAudio } from './AudioContext';\nimport styled from 'styled-components';\nimport AudioWaveform from './AudioWaveform';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlayerContainer = styled.div`\n  background-color: white;\n  padding: 20px;\n  border-radius: 8px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n`;\n_c = PlayerContainer;\nconst ControlsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-bottom: 20px;\n`;\n_c2 = ControlsContainer;\nconst PlayButton = styled.button`\n  background-color: #ff5500;\n  color: white;\n  border: none;\n  padding: 10px;\n  font-size: 16px;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 20px;\n  transition: background-color 0.3s;\n\n  &:hover {\n    background-color: #ff7700;\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 2px rgba(255, 85, 0, 0.5);\n  }\n`;\n_c3 = PlayButton;\nconst TimeDisplay = styled.div`\n  font-size: 14px;\n  color: #333;\n`;\n_c4 = TimeDisplay;\nconst AudioInfo = styled.div`\n  margin-bottom: 10px;\n  font-size: 18px;\n  font-weight: bold;\n  color: #333;\n`;\n_c5 = AudioInfo;\nconst AudioPlayer = () => {\n  _s();\n  const {\n    currentAudioUrl\n  } = useAudio();\n  const audioContextRef = useRef(null);\n  const sourceNodeRef = useRef(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [audioBuffer, setAudioBuffer] = useState(null);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  useEffect(() => {\n    audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n    return () => {\n      var _audioContextRef$curr;\n      (_audioContextRef$curr = audioContextRef.current) === null || _audioContextRef$curr === void 0 ? void 0 : _audioContextRef$curr.close();\n    };\n  }, []);\n  useEffect(() => {\n    if (currentAudioUrl && audioContextRef.current) {\n      loadAudio(currentAudioUrl);\n    }\n  }, [currentAudioUrl]);\n  const loadAudio = async url => {\n    if (!audioContextRef.current) return;\n    try {\n      const response = await fetch(url);\n      const arrayBuffer = await response.arrayBuffer();\n      const decodedBuffer = await audioContextRef.current.decodeAudioData(arrayBuffer);\n      setAudioBuffer(decodedBuffer);\n      setDuration(decodedBuffer.duration);\n    } catch (error) {\n      console.error('Error loading audio:', error);\n    }\n  };\n  const playAudio = () => {\n    if (!audioContextRef.current || !audioBuffer) return;\n    if (sourceNodeRef.current) {\n      sourceNodeRef.current.stop();\n    }\n    sourceNodeRef.current = audioContextRef.current.createBufferSource();\n    sourceNodeRef.current.buffer = audioBuffer;\n    sourceNodeRef.current.connect(audioContextRef.current.destination);\n    sourceNodeRef.current.start(0, currentTime);\n    setIsPlaying(true);\n\n    // Update current time\n    const startTime = audioContextRef.current.currentTime - currentTime;\n    const updateTime = () => {\n      if (isPlaying) {\n        setCurrentTime(audioContextRef.current.currentTime - startTime);\n        requestAnimationFrame(updateTime);\n      }\n    };\n    updateTime();\n  };\n  const pauseAudio = () => {\n    if (sourceNodeRef.current) {\n      sourceNodeRef.current.stop();\n      setIsPlaying(false);\n    }\n  };\n  const handleSeek = time => {\n    setCurrentTime(time);\n    if (isPlaying) {\n      pauseAudio();\n      playAudio();\n    }\n  };\n  const formatTime = time => {\n    const minutes = Math.floor(time / 60);\n    const seconds = Math.floor(time % 60);\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  };\n  return /*#__PURE__*/_jsxDEV(PlayerContainer, {\n    children: [/*#__PURE__*/_jsxDEV(AudioInfo, {\n      children: currentAudioUrl ? currentAudioUrl.split('/').pop() : 'No audio selected'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(ControlsContainer, {\n      children: [/*#__PURE__*/_jsxDEV(PlayButton, {\n        onClick: isPlaying ? pauseAudio : playAudio,\n        children: isPlaying ? '❚❚' : '▶'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(TimeDisplay, {\n        children: [formatTime(currentTime), \" / \", formatTime(duration)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }, this), audioBuffer && /*#__PURE__*/_jsxDEV(AudioWaveform, {\n      audioBuffer: audioBuffer,\n      currentTime: currentTime,\n      duration: duration,\n      onSeek: handleSeek\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 9\n  }, this);\n};\n_s(AudioPlayer, \"bfB3fgSCS3O6BBtMra6ajjT5nBA=\", false, function () {\n  return [useAudio];\n});\n_c6 = AudioPlayer;\nexport default AudioPlayer;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"PlayerContainer\");\n$RefreshReg$(_c2, \"ControlsContainer\");\n$RefreshReg$(_c3, \"PlayButton\");\n$RefreshReg$(_c4, \"TimeDisplay\");\n$RefreshReg$(_c5, \"AudioInfo\");\n$RefreshReg$(_c6, \"AudioPlayer\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useAudio","styled","AudioWaveform","jsxDEV","_jsxDEV","PlayerContainer","div","_c","ControlsContainer","_c2","PlayButton","button","_c3","TimeDisplay","_c4","AudioInfo","_c5","AudioPlayer","_s","currentAudioUrl","audioContextRef","sourceNodeRef","isPlaying","setIsPlaying","audioBuffer","setAudioBuffer","currentTime","setCurrentTime","duration","setDuration","current","window","AudioContext","webkitAudioContext","_audioContextRef$curr","close","loadAudio","url","response","fetch","arrayBuffer","decodedBuffer","decodeAudioData","error","console","playAudio","stop","createBufferSource","buffer","connect","destination","start","startTime","updateTime","requestAnimationFrame","pauseAudio","handleSeek","time","formatTime","minutes","Math","floor","seconds","toString","padStart","children","split","pop","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSeek","_c6","$RefreshReg$"],"sources":["/home/gleb/my_app_test/src/audio/AudioPlayer.tsx"],"sourcesContent":["// AudioPlayer.tsx\nimport React, { useRef, useEffect, useState } from 'react';\nimport { useAudio } from './AudioContext';\nimport styled from 'styled-components';\nimport AudioWaveform from './AudioWaveform';\n\nconst PlayerContainer = styled.div`\n  background-color: white;\n  padding: 20px;\n  border-radius: 8px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n`;\n\nconst ControlsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-bottom: 20px;\n`;\n\nconst PlayButton = styled.button`\n  background-color: #ff5500;\n  color: white;\n  border: none;\n  padding: 10px;\n  font-size: 16px;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 20px;\n  transition: background-color 0.3s;\n\n  &:hover {\n    background-color: #ff7700;\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 2px rgba(255, 85, 0, 0.5);\n  }\n`;\n\nconst TimeDisplay = styled.div`\n  font-size: 14px;\n  color: #333;\n`;\n\nconst AudioInfo = styled.div`\n  margin-bottom: 10px;\n  font-size: 18px;\n  font-weight: bold;\n  color: #333;\n`;\n\n\nconst AudioPlayer: React.FC = () => {\n    const { currentAudioUrl } = useAudio();\n    const audioContextRef = useRef<AudioContext | null>(null);\n    const sourceNodeRef = useRef<AudioBufferSourceNode | null>(null);\n    const [isPlaying, setIsPlaying] = useState(false);\n    const [audioBuffer, setAudioBuffer] = useState<AudioBuffer | null>(null);\n    const [currentTime, setCurrentTime] = useState(0);\n    const [duration, setDuration] = useState(0);\n  \n    useEffect(() => {\n      audioContextRef.current = new (window.AudioContext || (window as any).webkitAudioContext)();\n      return () => {\n        audioContextRef.current?.close();\n      };\n    }, []);\n  \n    useEffect(() => {\n      if (currentAudioUrl && audioContextRef.current) {\n        loadAudio(currentAudioUrl);\n      }\n    }, [currentAudioUrl]);\n  \n    const loadAudio = async (url: string) => {\n      if (!audioContextRef.current) return;\n  \n      try {\n        const response = await fetch(url);\n        const arrayBuffer = await response.arrayBuffer();\n        const decodedBuffer = await audioContextRef.current.decodeAudioData(arrayBuffer);\n        setAudioBuffer(decodedBuffer);\n        setDuration(decodedBuffer.duration);\n      } catch (error) {\n        console.error('Error loading audio:', error);\n      }\n    };\n  \n    const playAudio = () => {\n      if (!audioContextRef.current || !audioBuffer) return;\n  \n      if (sourceNodeRef.current) {\n        sourceNodeRef.current.stop();\n      }\n  \n      sourceNodeRef.current = audioContextRef.current.createBufferSource();\n      sourceNodeRef.current.buffer = audioBuffer;\n      sourceNodeRef.current.connect(audioContextRef.current.destination);\n      sourceNodeRef.current.start(0, currentTime);\n      setIsPlaying(true);\n  \n      // Update current time\n      const startTime = audioContextRef.current.currentTime - currentTime;\n      const updateTime = () => {\n        if (isPlaying) {\n          setCurrentTime(audioContextRef.current!.currentTime - startTime);\n          requestAnimationFrame(updateTime);\n        }\n      };\n      updateTime();\n    };\n  \n    const pauseAudio = () => {\n      if (sourceNodeRef.current) {\n        sourceNodeRef.current.stop();\n        setIsPlaying(false);\n      }\n    };\n  \n    const handleSeek = (time: number) => {\n      setCurrentTime(time);\n      if (isPlaying) {\n        pauseAudio();\n        playAudio();\n      }\n    };\n\n    const formatTime = (time: number) => {\n        const minutes = Math.floor(time / 60);\n        const seconds = Math.floor(time % 60);\n        return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n      };\n    \n      return (\n        <PlayerContainer>\n          <AudioInfo>\n            {currentAudioUrl ? currentAudioUrl.split('/').pop() : 'No audio selected'}\n          </AudioInfo>\n          <ControlsContainer>\n            <PlayButton onClick={isPlaying ? pauseAudio : playAudio}>\n              {isPlaying ? '❚❚' : '▶'}\n            </PlayButton>\n            <TimeDisplay>\n              {formatTime(currentTime)} / {formatTime(duration)}\n            </TimeDisplay>\n          </ControlsContainer>\n          {audioBuffer && (\n            <AudioWaveform\n              audioBuffer={audioBuffer}\n              currentTime={currentTime}\n              duration={duration}\n              onSeek={handleSeek}\n            />\n          )}\n        </PlayerContainer>\n      );\n    };\n    \n    export default AudioPlayer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}