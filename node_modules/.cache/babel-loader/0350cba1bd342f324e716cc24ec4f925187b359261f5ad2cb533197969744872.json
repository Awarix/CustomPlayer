{"ast":null,"code":"var _jsxFileName = \"/home/gleb/my_app_test/src/audio/AudioContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// AudioContext.tsx\nimport React, { createContext, useState, useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioContext = /*#__PURE__*/createContext(undefined);\nexport const AudioProvider = ({\n  children\n}) => {\n  _s();\n  const [currentAudioUrl, setCurrentAudioUrl] = useState('');\n  const [audioUrl, setAudioUrl] = useState('');\n  return /*#__PURE__*/_jsxDEV(AudioContext.Provider, {\n    value: {\n      currentAudioUrl,\n      setCurrentAudioUrl,\n      audioUrl,\n      setAudioUrl\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioProvider, \"yiixMU15eE7ji3pi7obNGiEpX7o=\");\n_c = AudioProvider;\nexport const useAudio = () => {\n  _s2();\n  const context = useContext(AudioContext);\n  if (context === undefined) {\n    throw new Error('useAudio must be used within an AudioProvider');\n  }\n  return context;\n};\n_s2(useAudio, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AudioProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","jsxDEV","_jsxDEV","AudioContext","undefined","AudioProvider","children","_s","currentAudioUrl","setCurrentAudioUrl","audioUrl","setAudioUrl","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAudio","_s2","context","Error","$RefreshReg$"],"sources":["/home/gleb/my_app_test/src/audio/AudioContext.tsx"],"sourcesContent":["// AudioContext.tsx\nimport React, { createContext, useState, useContext } from 'react';\n\ninterface AudioContextType {\n  currentAudioUrl: string;\n  setCurrentAudioUrl: (url: string) => void;\n  audioUrl: string;\n  setAudioUrl: (url: string) => void;\n}\n\nconst AudioContext = createContext<AudioContextType | undefined>(undefined);\n\nexport const AudioProvider: React.FC = ({ children }) => {\n  const [currentAudioUrl, setCurrentAudioUrl] = useState<string>('');\n  const [audioUrl, setAudioUrl] = useState<string>('');\n\n  return (\n    <AudioContext.Provider value={{ currentAudioUrl, setCurrentAudioUrl, audioUrl, setAudioUrl }}>\n      {children}\n    </AudioContext.Provider>\n  );\n};\n\nexport const useAudio = () => {\n  const context = useContext(AudioContext);\n  if (context === undefined) {\n    throw new Error('useAudio must be used within an AudioProvider');\n  }\n  return context;\n};"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AASnE,MAAMC,YAAY,gBAAGL,aAAa,CAA+BM,SAAS,CAAC;AAE3E,OAAO,MAAMC,aAAuB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACvD,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAS,EAAE,CAAC;EAClE,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAS,EAAE,CAAC;EAEpD,oBACEG,OAAA,CAACC,YAAY,CAACS,QAAQ;IAACC,KAAK,EAAE;MAAEL,eAAe;MAAEC,kBAAkB;MAAEC,QAAQ;MAAEC;IAAY,CAAE;IAAAL,QAAA,EAC1FA;EAAQ;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACV,EAAA,CATWF,aAAuB;AAAAa,EAAA,GAAvBb,aAAuB;AAWpC,OAAO,MAAMc,QAAQ,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC5B,MAAMC,OAAO,GAAGrB,UAAU,CAACG,YAAY,CAAC;EACxC,IAAIkB,OAAO,KAAKjB,SAAS,EAAE;IACzB,MAAM,IAAIkB,KAAK,CAAC,+CAA+C,CAAC;EAClE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,QAAQ;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}