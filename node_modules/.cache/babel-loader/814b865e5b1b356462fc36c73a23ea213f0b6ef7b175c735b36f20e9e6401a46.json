{"ast":null,"code":"var _jsxFileName = \"/home/gleb/my_app_test/src/Custom/Thursday/Player1.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Player1 = ({\n  audioUrl,\n  words\n}) => {\n  _s();\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [zoomLevel, setZoomLevel] = useState(1);\n  const audioRef = useRef(null);\n  const canvasRef = useRef(null);\n  const waveformData = useRef([]);\n  useEffect(() => {\n    if (audioRef.current) {\n      audioRef.current.addEventListener('loadedmetadata', () => {\n        setDuration(audioRef.current.duration);\n        generateWaveformData();\n      });\n      audioRef.current.addEventListener('timeupdate', () => {\n        setCurrentTime(audioRef.current.currentTime);\n      });\n    }\n  }, []);\n  useEffect(() => {\n    drawWaveform();\n  }, [isExpanded, currentTime, zoomLevel, words]);\n  const togglePlay = () => {\n    var _audioRef$current;\n    if ((_audioRef$current = audioRef.current) !== null && _audioRef$current !== void 0 && _audioRef$current.paused) {\n      audioRef.current.play();\n    } else {\n      var _audioRef$current2;\n      (_audioRef$current2 = audioRef.current) === null || _audioRef$current2 === void 0 ? void 0 : _audioRef$current2.pause();\n    }\n    setIsPlaying(!isPlaying);\n  };\n  const toggleExpand = () => {\n    setIsExpanded(!isExpanded);\n    setZoomLevel(1); // Сбросить зум, когда сворачиваем\n  };\n  const formatTime = time => {\n    const minutes = Math.floor(time / 60);\n    const seconds = Math.floor(time % 60);\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  };\n  const generateWaveformData = async () => {\n    if (!audioRef.current) return;\n    const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    const response = await fetch(audioUrl);\n    const arrayBuffer = await response.arrayBuffer();\n    const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n    const rawData = audioBuffer.getChannelData(0);\n    const samples = 1500;\n    const blockSize = Math.floor(rawData.length / samples);\n    const filteredData = [];\n    for (let i = 0; i < samples; i++) {\n      let blockStart = blockSize * i;\n      let sum = 0;\n      for (let j = 0; j < blockSize; j++) {\n        sum = sum + Math.abs(rawData[blockStart + j]);\n      }\n      filteredData.push(sum / blockSize);\n    }\n    const multiplier = Math.pow(Math.max(...filteredData), -1);\n    waveformData.current = filteredData.map(n => n * multiplier);\n    drawWaveform();\n  };\n  const drawWaveform = () => {\n    if (!canvasRef.current || waveformData.current.length === 0) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const dpr = window.devicePixelRatio || 1;\n    const padding = 5;\n    canvas.width = canvas.offsetWidth * dpr;\n    canvas.height = (isExpanded ? 300 : 80) * dpr;\n    ctx.scale(dpr, dpr);\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    const width = canvas.width / dpr;\n    const height = canvas.height / dpr;\n    const barWidth = width / waveformData.current.length * zoomLevel;\n    const visibleBars = Math.floor(width / barWidth);\n    const startIndex = Math.floor(currentTime / duration * (waveformData.current.length - visibleBars));\n\n    // Отрисовка волны\n    ctx.fillStyle = '#b7e1dd';\n    ctx.strokeStyle = '#b7e1dd';\n    for (let i = 0; i < visibleBars; i++) {\n      const dataIndex = startIndex + i;\n      if (dataIndex >= waveformData.current.length) break;\n      const x = i * barWidth;\n      const barHeight = waveformData.current[dataIndex] * (height - padding * 2);\n      ctx.beginPath();\n      ctx.lineTo(x + barWidth / 2, height / 2 + padding - barHeight / 2);\n      ctx.lineTo(x + barWidth / 2, height / 2 + padding + barHeight / 2);\n      ctx.stroke();\n    }\n\n    // Отрисовка прогресса\n    const progressWidth = currentTime / duration * width;\n    ctx.fillStyle = '#357F78';\n    ctx.strokeStyle = '#357F78';\n    ctx.save();\n    ctx.beginPath();\n    ctx.rect(0, 0, progressWidth, height);\n    ctx.clip();\n    for (let i = 0; i < visibleBars; i++) {\n      const dataIndex = startIndex + i;\n      if (dataIndex >= waveformData.current.length) break;\n      const x = i * barWidth;\n      const barHeight = waveformData.current[dataIndex] * (height - padding * 2);\n      ctx.beginPath();\n      ctx.lineTo(x + barWidth / 2, height / 2 + padding - barHeight / 2);\n      ctx.lineTo(x + barWidth / 2, height / 2 + padding + barHeight / 2);\n      ctx.stroke();\n    }\n    ctx.restore();\n\n    // Отрисовка указателя воспроизведения (вертикальная линия)\n    ctx.beginPath();\n    ctx.strokeStyle = '#357F78';\n    ctx.lineWidth = 1;\n    ctx.moveTo(progressWidth, 0);\n    ctx.lineTo(progressWidth, height);\n    ctx.stroke();\n\n    // Отрисовка слов\n    ctx.textBaseline = 'top';\n    words.forEach(word => {\n      const wordStartX = (word.start / duration * width - startIndex * barWidth) / zoomLevel;\n      const wordEndX = (word.end / duration * width - startIndex * barWidth) / zoomLevel;\n      const wordWidth = 1;\n      if (wordStartX < width && wordEndX > 0) {\n        // Отрисовка фона слова\n        ctx.fillStyle = word.bgColor;\n        ctx.fillRect(wordStartX, 0, wordWidth, height);\n\n        // Отрисовка текста слова\n        ctx.fillStyle = word.color;\n        ctx.font = '12px Arial';\n\n        // Проверяем, достаточно ли места для отображения текста\n        if (wordWidth > 20) {\n          // Минимальная ширина для отображения текста\n          // Обрезаем текст, если он не помещается\n          let displayText = word.word;\n          while (ctx.measureText(displayText).width > wordWidth - 4 && displayText.length > 0) {\n            displayText = displayText.slice(0, -1);\n          }\n          if (displayText.length < word.word.length) {\n            displayText += '...';\n          }\n\n          // Центрируем текст в пределах слова\n          const textWidth = ctx.measureText(displayText).width;\n          const textX = wordStartX + (wordWidth - textWidth) / 2;\n          ctx.fillText(displayText, textX, 5);\n        } else {\n          // Если места недостаточно, рисуем только маркер\n          ctx.fillRect(wordStartX, 0, 2, height);\n        }\n      }\n    });\n\n    // Отрисовка временных меток (опционально)\n    ctx.fillStyle = '#000000';\n    ctx.font = '10px Arial';\n    const timeStep = 5; // шаг в секундах\n    for (let i = 0; i < duration; i += timeStep) {\n      const x = i / duration * width;\n      if (x >= 0 && x <= width) {\n        ctx.fillText(formatTime(i), x, height - 15);\n      }\n    }\n  };\n  const handleCanvasClick = e => {\n    const canvas = canvasRef.current;\n    if (!canvas || !audioRef.current) return;\n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const clickProgress = x / rect.width;\n    const newTime = clickProgress * duration;\n    audioRef.current.currentTime = newTime;\n    setCurrentTime(newTime);\n\n    // Проверяем, было ли нажатие на слово\n    const clickedWord = words.find(word => {\n      const wordStartX = word.start / duration * rect.width;\n      const wordEndX = word.end / duration * rect.width;\n      return x >= wordStartX && x <= wordEndX;\n    });\n    if (clickedWord) {\n      console.log('Clicked word:', clickedWord.word);\n      // Здесь вы можете добавить дополнительную логику для обработки клика по слову\n      // Например, выделение слова или отображение дополнительной информации\n    }\n  };\n  const smoothZoom = (targetZoom, duration = 300) => {\n    const startZoom = zoomLevel;\n    const startTime = performance.now();\n    const animate = currentTime => {\n      const elapsed = currentTime - startTime;\n      const progress = Math.min(elapsed / duration, 1);\n      const easeProgress = progress * (2 - progress); // easeOutQuad\n\n      const newZoom = startZoom + (targetZoom - startZoom) * easeProgress;\n      setZoomLevel(newZoom);\n      if (progress < 1) {\n        requestAnimationFrame(animate);\n      }\n    };\n    requestAnimationFrame(animate);\n  };\n  const zoomIn = () => {\n    const newZoom = Math.min(zoomLevel * 2, 64);\n    smoothZoom(newZoom);\n  };\n  const zoomOut = () => {\n    const newZoom = Math.max(zoomLevel / 2, 1);\n    smoothZoom(newZoom);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"audio-player\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: togglePlay,\n      children: isPlaying ? 'Pause' : 'Play'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleExpand,\n      children: isExpanded ? 'Collapse' : 'Expand'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: zoomIn,\n      children: \"Zoom In\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: zoomOut,\n      children: \"Zoom Out\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative',\n        width: '100%',\n        height: isExpanded ? '300px' : '80px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        onClick: handleCanvasClick,\n        style: {\n          width: '100%',\n          height: '100%',\n          cursor: 'pointer'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      src: audioUrl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [formatTime(currentTime), \" / \", formatTime(duration)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 275,\n    columnNumber: 5\n  }, this);\n};\n_s(Player1, \"YnFW0YTTqiIE9xs9zZo0hg07iYA=\");\n_c = Player1;\nexport default Player1;\nvar _c;\n$RefreshReg$(_c, \"Player1\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","Player1","audioUrl","words","_s","isPlaying","setIsPlaying","isExpanded","setIsExpanded","currentTime","setCurrentTime","duration","setDuration","zoomLevel","setZoomLevel","audioRef","canvasRef","waveformData","current","addEventListener","generateWaveformData","drawWaveform","togglePlay","_audioRef$current","paused","play","_audioRef$current2","pause","toggleExpand","formatTime","time","minutes","Math","floor","seconds","toString","padStart","audioContext","window","AudioContext","webkitAudioContext","response","fetch","arrayBuffer","audioBuffer","decodeAudioData","rawData","getChannelData","samples","blockSize","length","filteredData","i","blockStart","sum","j","abs","push","multiplier","pow","max","map","n","canvas","ctx","getContext","dpr","devicePixelRatio","padding","width","offsetWidth","height","scale","clearRect","barWidth","visibleBars","startIndex","fillStyle","strokeStyle","dataIndex","x","barHeight","beginPath","lineTo","stroke","progressWidth","save","rect","clip","restore","lineWidth","moveTo","textBaseline","forEach","word","wordStartX","start","wordEndX","end","wordWidth","bgColor","fillRect","color","font","displayText","measureText","slice","textWidth","textX","fillText","timeStep","handleCanvasClick","e","getBoundingClientRect","clientX","left","clickProgress","newTime","clickedWord","find","console","log","smoothZoom","targetZoom","startZoom","startTime","performance","now","animate","elapsed","progress","min","easeProgress","newZoom","requestAnimationFrame","zoomIn","zoomOut","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","style","position","ref","cursor","src","_c","$RefreshReg$"],"sources":["/home/gleb/my_app_test/src/Custom/Thursday/Player1.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\n\ninterface Word {\n  id: number;\n  recordId: number;\n  channelNumber: number;\n  lang: string;\n  word: string;\n  confidence: number;\n  start: number;\n  end: number;\n  color: string;\n  bgColor: string;\n  type: string;\n}\n\ninterface AudioPlayerProps {\n  audioUrl: string;\n  words: Word[];\n}\n\nconst Player1: React.FC<AudioPlayerProps> = ({ audioUrl, words }) => {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [zoomLevel, setZoomLevel] = useState(1);\n\n  const audioRef = useRef<HTMLAudioElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const waveformData = useRef<number[]>([]);\n\n  useEffect(() => {\n    if (audioRef.current) {\n      audioRef.current.addEventListener('loadedmetadata', () => {\n        setDuration(audioRef.current!.duration);\n        generateWaveformData();\n      });\n\n      audioRef.current.addEventListener('timeupdate', () => {\n        setCurrentTime(audioRef.current!.currentTime);\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    drawWaveform();\n  }, [isExpanded, currentTime, zoomLevel, words]);\n\n  const togglePlay = () => {\n    if (audioRef.current?.paused) {\n      audioRef.current.play();\n    } else {\n      audioRef.current?.pause();\n    }\n    setIsPlaying(!isPlaying);\n  };\n\n  const toggleExpand = () => {\n    setIsExpanded(!isExpanded);\n    setZoomLevel(1); // Сбросить зум, когда сворачиваем\n  };\n\n  const formatTime = (time: number) => {\n    const minutes = Math.floor(time / 60);\n    const seconds = Math.floor(time % 60);\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  };\n\n  const generateWaveformData = async () => {\n    if (!audioRef.current) return;\n\n    const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n    const response = await fetch(audioUrl);\n    const arrayBuffer = await response.arrayBuffer();\n    const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n\n    const rawData = audioBuffer.getChannelData(0);\n    const samples = 1500;\n    const blockSize = Math.floor(rawData.length / samples);\n    const filteredData = [];\n    for (let i = 0; i < samples; i++) {\n      let blockStart = blockSize * i;\n      let sum = 0;\n      for (let j = 0; j < blockSize; j++) {\n        sum = sum + Math.abs(rawData[blockStart + j]);\n      }\n      filteredData.push(sum / blockSize);\n    }\n\n    const multiplier = Math.pow(Math.max(...filteredData), -1);\n    waveformData.current = filteredData.map(n => n * multiplier);\n\n    drawWaveform();\n  };\n\n  const drawWaveform = () => {\n    if (!canvasRef.current || waveformData.current.length === 0) return;\n  \n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d')!;\n    const dpr = window.devicePixelRatio || 1;\n    const padding = 5;\n  \n    canvas.width = canvas.offsetWidth * dpr;\n    canvas.height = (isExpanded ? 300 : 80) * dpr;\n  \n    ctx.scale(dpr, dpr);\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n  \n    const width = canvas.width / dpr;\n    const height = canvas.height / dpr;\n    const barWidth = (width / waveformData.current.length) * zoomLevel;\n    const visibleBars = Math.floor(width / barWidth);\n    const startIndex = Math.floor((currentTime / duration) * (waveformData.current.length - visibleBars));\n  \n    // Отрисовка волны\n    ctx.fillStyle = '#b7e1dd';\n    ctx.strokeStyle = '#b7e1dd';\n  \n    for (let i = 0; i < visibleBars; i++) {\n      const dataIndex = startIndex + i;\n      if (dataIndex >= waveformData.current.length) break;\n  \n      const x = i * barWidth;\n      const barHeight = waveformData.current[dataIndex] * (height - padding * 2);\n  \n      ctx.beginPath();\n      ctx.lineTo(x + barWidth / 2, height / 2 + padding - barHeight / 2);\n      ctx.lineTo(x + barWidth / 2, height / 2 + padding + barHeight / 2);\n      ctx.stroke();\n    }\n  \n    // Отрисовка прогресса\n    const progressWidth = (currentTime / duration) * width;\n    ctx.fillStyle = '#357F78';\n    ctx.strokeStyle = '#357F78';\n  \n    ctx.save();\n    ctx.beginPath();\n    ctx.rect(0, 0, progressWidth, height);\n    ctx.clip();\n  \n    for (let i = 0; i < visibleBars; i++) {\n      const dataIndex = startIndex + i;\n      if (dataIndex >= waveformData.current.length) break;\n  \n      const x = i * barWidth;\n      const barHeight = waveformData.current[dataIndex] * (height - padding * 2);\n  \n      ctx.beginPath();\n      ctx.lineTo(x + barWidth / 2, height / 2 + padding - barHeight / 2);\n      ctx.lineTo(x + barWidth / 2, height / 2 + padding + barHeight / 2);\n      ctx.stroke();\n    }\n  \n    ctx.restore();\n  \n    // Отрисовка указателя воспроизведения (вертикальная линия)\n    ctx.beginPath();\n    ctx.strokeStyle = '#357F78';\n    ctx.lineWidth = 1;\n    ctx.moveTo(progressWidth, 0);\n    ctx.lineTo(progressWidth, height);\n    ctx.stroke();\n  \n    // Отрисовка слов\n    ctx.textBaseline = 'top';\n    words.forEach(word => {\n      const wordStartX = ((word.start / duration) * width - startIndex * barWidth) / zoomLevel;\n      const wordEndX = ((word.end / duration) * width - startIndex * barWidth) / zoomLevel;\n      const wordWidth = 1;\n  \n      if (wordStartX < width && wordEndX > 0) {\n        // Отрисовка фона слова\n        ctx.fillStyle = word.bgColor;\n        ctx.fillRect(wordStartX, 0, wordWidth, height);\n  \n        // Отрисовка текста слова\n      ctx.fillStyle = word.color;\n      ctx.font = '12px Arial';\n      \n      // Проверяем, достаточно ли места для отображения текста\n      if (wordWidth > 20) {  // Минимальная ширина для отображения текста\n        // Обрезаем текст, если он не помещается\n        let displayText = word.word;\n        while (ctx.measureText(displayText).width > wordWidth - 4 && displayText.length > 0) {\n          displayText = displayText.slice(0, -1);\n        }\n        if (displayText.length < word.word.length) {\n          displayText += '...';\n        }\n        \n        // Центрируем текст в пределах слова\n        const textWidth = ctx.measureText(displayText).width;\n        const textX = wordStartX + (wordWidth - textWidth) / 2;\n        \n        ctx.fillText(displayText, textX, 5);\n      } else {\n        // Если места недостаточно, рисуем только маркер\n        ctx.fillRect(wordStartX, 0, 2, height);\n      }\n    }\n  });\n\n  // Отрисовка временных меток (опционально)\n  ctx.fillStyle = '#000000';\n  ctx.font = '10px Arial';\n  const timeStep = 5; // шаг в секундах\n  for (let i = 0; i < duration; i += timeStep) {\n    const x = (i / duration) * width;\n    if (x >= 0 && x <= width) {\n      ctx.fillText(formatTime(i), x, height - 15);\n    }\n  }\n};\n\n  const handleCanvasClick = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    const canvas = canvasRef.current;\n    if (!canvas || !audioRef.current) return;\n  \n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const clickProgress = x / rect.width;\n  \n    const newTime = clickProgress * duration;\n    audioRef.current.currentTime = newTime;\n    setCurrentTime(newTime);\n  \n    // Проверяем, было ли нажатие на слово\n    const clickedWord = words.find(word => {\n      const wordStartX = (word.start / duration) * rect.width;\n      const wordEndX = (word.end / duration) * rect.width;\n      return x >= wordStartX && x <= wordEndX;\n    });\n  \n    if (clickedWord) {\n      console.log('Clicked word:', clickedWord.word);\n      // Здесь вы можете добавить дополнительную логику для обработки клика по слову\n      // Например, выделение слова или отображение дополнительной информации\n    }\n  };\n  \n  const smoothZoom = (targetZoom: number, duration: number = 300) => {\n    const startZoom = zoomLevel;\n    const startTime = performance.now();\n\n    const animate = (currentTime: number) => {\n      const elapsed = currentTime - startTime;\n      const progress = Math.min(elapsed / duration, 1);\n      const easeProgress = progress * (2 - progress); // easeOutQuad\n\n      const newZoom = startZoom + (targetZoom - startZoom) * easeProgress;\n      setZoomLevel(newZoom);\n\n      if (progress < 1) {\n        requestAnimationFrame(animate);\n      }\n    };\n\n    requestAnimationFrame(animate);\n  };\n\n  const zoomIn = () => {\n    const newZoom = Math.min(zoomLevel * 2, 64);\n    smoothZoom(newZoom);\n  };\n\n  const zoomOut = () => {\n    const newZoom = Math.max(zoomLevel / 2, 1);\n    smoothZoom(newZoom);\n  };\n  \n  return (\n    <div className=\"audio-player\">\n      <button onClick={togglePlay}>{isPlaying ? 'Pause' : 'Play'}</button>\n      <button onClick={toggleExpand}>{isExpanded ? 'Collapse' : 'Expand'}</button>\n      <button onClick={zoomIn}>Zoom In</button>\n      <button onClick={zoomOut}>Zoom Out</button>\n      <div style={{position: 'relative', width: '100%', height: isExpanded ? '300px' : '80px'}}>\n        <canvas \n          ref={canvasRef} \n          onClick={handleCanvasClick}\n          style={{ \n            width: '100%', \n            height: '100%',\n            cursor: 'pointer'\n          }} \n        />\n      </div>\n      <audio ref={audioRef} src={audioUrl} />\n      <div>\n        {formatTime(currentTime)} / {formatTime(duration)}\n      </div>\n    </div>\n  );\n};\n\nexport default Player1;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}