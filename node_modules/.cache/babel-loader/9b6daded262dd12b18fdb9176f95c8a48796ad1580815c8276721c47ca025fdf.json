{"ast":null,"code":"var _jsxFileName = \"/home/gleb/my_app_test/src/Custom/Friday/CustomAudio.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomPlayer = ({\n  audioUrl\n}) => {\n  _s();\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [showWaveform, setShowWaveform] = useState(true);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const audioRef = useRef(null);\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    if (audioRef.current) {\n      audioRef.current.addEventListener('loadedmetadata', () => {\n        setDuration(audioRef.current.duration);\n      });\n      audioRef.current.addEventListener('timeupdate', () => {\n        setCurrentTime(audioRef.current.currentTime);\n      });\n    }\n  }, []);\n  useEffect(() => {\n    if (showWaveform) {\n      drawWaveform();\n    }\n  }, [showWaveform]);\n  const togglePlay = () => {\n    var _audioRef$current;\n    if ((_audioRef$current = audioRef.current) !== null && _audioRef$current !== void 0 && _audioRef$current.paused) {\n      audioRef.current.play();\n    } else {\n      var _audioRef$current2;\n      (_audioRef$current2 = audioRef.current) === null || _audioRef$current2 === void 0 ? void 0 : _audioRef$current2.pause();\n    }\n    setIsPlaying(!isPlaying);\n  };\n  const toggleWaveform = () => {\n    setShowWaveform(!showWaveform);\n  };\n  const formatTime = time => {\n    const minutes = Math.floor(time / 60);\n    const seconds = Math.floor(time % 60);\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  };\n  const drawWaveform = () => {\n    if (!canvasRef.current || !audioRef.current) return;\n    const context = new AudioContext();\n    const source = context.createMediaElementSource(audioRef.current);\n    const analyser = context.createAnalyser();\n    source.connect(analyser);\n    analyser.connect(context.destination);\n    const canvas = canvasRef.current;\n    const canvasCtx = canvas.getContext('2d');\n    analyser.fftSize = 256;\n    const bufferLength = analyser.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n    const draw = () => {\n      requestAnimationFrame(draw);\n      analyser.getByteFrequencyData(dataArray);\n      canvasCtx.fillStyle = 'rgb(200, 200, 200)';\n      canvasCtx.fillRect(0, 0, canvas.width, canvas.height);\n      const barWidth = canvas.width / bufferLength * 2.5;\n      let barHeight;\n      let x = 0;\n      for (let i = 0; i < bufferLength; i++) {\n        barHeight = dataArray[i] / 2;\n        canvasCtx.fillStyle = `rgb(50, 50, ${barHeight + 100})`;\n        canvasCtx.fillRect(x, canvas.height - barHeight / 2, barWidth, barHeight);\n        x += barWidth + 1;\n      }\n    };\n    draw();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"audio-player\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: togglePlay,\n      children: isPlaying ? 'Pause' : 'Play'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleWaveform,\n      children: showWaveform ? 'Hide Waveform' : 'Show Waveform'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      src: audioUrl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), showWaveform ? /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: \"300\",\n      height: \"100\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      min: 0,\n      max: duration,\n      value: currentTime,\n      onChange: e => {\n        const time = parseFloat(e.target.value);\n        setCurrentTime(time);\n        if (audioRef.current) {\n          audioRef.current.currentTime = time;\n        }\n      },\n      style: {\n        width: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [formatTime(currentTime), \" / \", formatTime(duration)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(CustomPlayer, \"2V31e1G/tfO4hBEoTbsyi3O1qyE=\");\n_c = CustomPlayer;\nexport default CustomPlayer;\nvar _c;\n$RefreshReg$(_c, \"CustomPlayer\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","CustomPlayer","audioUrl","_s","isPlaying","setIsPlaying","showWaveform","setShowWaveform","currentTime","setCurrentTime","duration","setDuration","audioRef","canvasRef","current","addEventListener","drawWaveform","togglePlay","_audioRef$current","paused","play","_audioRef$current2","pause","toggleWaveform","formatTime","time","minutes","Math","floor","seconds","toString","padStart","context","AudioContext","source","createMediaElementSource","analyser","createAnalyser","connect","destination","canvas","canvasCtx","getContext","fftSize","bufferLength","frequencyBinCount","dataArray","Uint8Array","draw","requestAnimationFrame","getByteFrequencyData","fillStyle","fillRect","width","height","barWidth","barHeight","x","i","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","src","type","min","max","value","onChange","e","parseFloat","target","style","_c","$RefreshReg$"],"sources":["/home/gleb/my_app_test/src/Custom/Friday/CustomAudio.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\n\ninterface AudioPlayerProps {\n  audioUrl: string;\n}\n\nconst CustomPlayer: React.FC<AudioPlayerProps> = ({ audioUrl }) => {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [showWaveform, setShowWaveform] = useState(true);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n\n  const audioRef = useRef<HTMLAudioElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    if (audioRef.current) {\n      audioRef.current.addEventListener('loadedmetadata', () => {\n        setDuration(audioRef.current!.duration);\n      });\n\n      audioRef.current.addEventListener('timeupdate', () => {\n        setCurrentTime(audioRef.current!.currentTime);\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    if (showWaveform) {\n      drawWaveform();\n    }\n  }, [showWaveform]);\n\n  const togglePlay = () => {\n    if (audioRef.current?.paused) {\n      audioRef.current.play();\n    } else {\n      audioRef.current?.pause();\n    }\n    setIsPlaying(!isPlaying);\n  };\n\n  const toggleWaveform = () => {\n    setShowWaveform(!showWaveform);\n  };\n\n  const formatTime = (time: number) => {\n    const minutes = Math.floor(time / 60);\n    const seconds = Math.floor(time % 60);\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  };\n\n  const drawWaveform = () => {\n    if (!canvasRef.current || !audioRef.current) return;\n\n    const context = new AudioContext();\n    const source = context.createMediaElementSource(audioRef.current);\n    const analyser = context.createAnalyser();\n\n    source.connect(analyser);\n    analyser.connect(context.destination);\n\n    const canvas = canvasRef.current;\n    const canvasCtx = canvas.getContext('2d')!;\n\n    analyser.fftSize = 256;\n    const bufferLength = analyser.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n\n    const draw = () => {\n      requestAnimationFrame(draw);\n\n      analyser.getByteFrequencyData(dataArray);\n\n      canvasCtx.fillStyle = 'rgb(200, 200, 200)';\n      canvasCtx.fillRect(0, 0, canvas.width, canvas.height);\n\n      const barWidth = (canvas.width / bufferLength) * 2.5;\n      let barHeight;\n      let x = 0;\n\n      for (let i = 0; i < bufferLength; i++) {\n        barHeight = dataArray[i] / 2;\n\n        canvasCtx.fillStyle = `rgb(50, 50, ${barHeight + 100})`;\n        canvasCtx.fillRect(x, canvas.height - barHeight / 2, barWidth, barHeight);\n\n        x += barWidth + 1;\n      }\n    };\n\n    draw();\n  };\n\n  return (\n    <div className=\"audio-player\">\n      <button onClick={togglePlay}>{isPlaying ? 'Pause' : 'Play'}</button>\n      <button onClick={toggleWaveform}>\n        {showWaveform ? 'Hide Waveform' : 'Show Waveform'}\n      </button>\n      <audio ref={audioRef} src={audioUrl} />\n      {showWaveform ? (\n        <canvas ref={canvasRef} width=\"300\" height=\"100\" />\n      ) : (\n        <input\n          type=\"range\"\n          min={0}\n          max={duration}\n          value={currentTime}\n          onChange={(e) => {\n            const time = parseFloat(e.target.value);\n            setCurrentTime(time);\n            if (audioRef.current) {\n              audioRef.current.currentTime = time;\n            }\n          }}\n          style={{ width: '100%' }}\n        />\n      )}\n      <div>\n        {formatTime(currentTime)} / {formatTime(duration)}\n      </div>\n    </div>\n  );\n};\n\nexport default CustomPlayer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}