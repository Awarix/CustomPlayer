{"ast":null,"code":"var _jsxFileName = \"/home/gleb/my_app_test/src/audio/r6/Player.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { IconButton, Slider } from '@material-ui/core';\nimport { PlayArrow, Pause } from '@material-ui/icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  controls: {\n    display: 'flex',\n    alignItems: 'center',\n    width: '100%',\n    marginBottom: 20\n    // marginTop: 100,\n  },\n  canvas: {\n    width: '100%',\n    height: 100,\n    border: '1px solid black' // Added for visibility\n  }\n});\nconst Player = ({\n  audioSrc,\n  segments,\n  keywords\n}) => {\n  _s();\n  const classes = useStyles();\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const audioRef = useRef(null);\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    if (audioRef.current) {\n      audioRef.current.addEventListener('loadedmetadata', () => {\n        setDuration(audioRef.current.duration);\n      });\n      audioRef.current.addEventListener('timeupdate', () => {\n        setCurrentTime(audioRef.current.currentTime);\n      });\n    }\n  }, []);\n  useEffect(() => {\n    drawWaveform();\n  }, [segments, keywords, duration]);\n  const togglePlay = () => {\n    if (audioRef.current) {\n      if (isPlaying) {\n        audioRef.current.pause();\n      } else {\n        audioRef.current.play();\n      }\n      setIsPlaying(!isPlaying);\n    }\n  };\n  const handleSliderChange = (event, newValue) => {\n    if (audioRef.current && typeof newValue === 'number') {\n      audioRef.current.currentTime = newValue;\n      setCurrentTime(newValue);\n    }\n  };\n  const drawWaveform = () => {\n    if (canvasRef.current && duration > 0) {\n      const ctx = canvasRef.current.getContext('2d');\n      if (ctx) {\n        const canvasWidth = canvasRef.current.width;\n        const canvasHeight = canvasRef.current.height;\n        ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n        console.log(`Drawing ${segments.length} segments and ${keywords.length} keywords`);\n\n        // Draw segments\n        segments.forEach((segment, index) => {\n          const startX = segment.Start / duration * canvasWidth;\n          const endX = segment.End / duration * canvasWidth;\n          ctx.fillStyle = segment.Words && segment.Words[0].NormalForm === \"[music]\" ? \"rgba(181, 201, 255, 0.5)\" : \"rgba(0, 123, 255, 0.5)\";\n          ctx.fillRect(startX, 0, endX - startX, canvasHeight);\n          console.log(`Drawing segment ${index}: start=${startX}, end=${endX}, color=${ctx.fillStyle}`);\n        });\n\n        // Draw keywords\n        keywords.forEach((kw, index) => {\n          const startX = kw.keyword.Start / duration * canvasWidth;\n          const width = (kw.keyword.End - kw.keyword.Start) / duration * canvasWidth;\n          ctx.fillStyle = kw.color;\n          ctx.fillRect(startX, 0, width, canvasHeight / 4);\n          console.log(`Drawing keyword ${index}: start=${startX}, width=${width}, color=${kw.color}`);\n        });\n\n        // Draw current time indicator\n        const currentTimeX = currentTime / duration * canvasWidth;\n        ctx.strokeStyle = 'red';\n        ctx.lineWidth = 2;\n        ctx.beginPath();\n        ctx.moveTo(currentTimeX, 0);\n        ctx.lineTo(currentTimeX, canvasHeight);\n        ctx.stroke();\n      }\n    } else {\n      console.log('Canvas not ready or duration is 0');\n    }\n  };\n  const formatTime = time => {\n    const minutes = Math.floor(time / 60);\n    const seconds = Math.floor(time % 60);\n    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      src: audioSrc\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.controls,\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: togglePlay,\n        children: isPlaying ? /*#__PURE__*/_jsxDEV(Pause, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 26\n        }, this) : /*#__PURE__*/_jsxDEV(PlayArrow, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 38\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        value: currentTime,\n        onChange: handleSliderChange,\n        min: 0,\n        max: duration,\n        step: 0.1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [formatTime(currentTime), \" / \", formatTime(duration)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      className: classes.canvas,\n      width: 1000,\n      height: 100,\n      onClick: e => {\n        const rect = canvasRef.current.getBoundingClientRect();\n        const x = e.clientX - rect.left;\n        const clickTime = x / canvasRef.current.width * duration;\n        if (audioRef.current) {\n          audioRef.current.currentTime = clickTime;\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Segments: \", segments.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Keywords: \", keywords.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Duration: \", duration]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 7\n  }, this);\n};\n_s(Player, \"/TQVGJupXnp8QguEZTzdLIM6ZaM=\", false, function () {\n  return [useStyles];\n});\n_c = Player;\nexport default Player;\nvar _c;\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"names":["React","useState","useRef","useEffect","makeStyles","IconButton","Slider","PlayArrow","Pause","jsxDEV","_jsxDEV","useStyles","root","width","display","flexDirection","alignItems","controls","marginBottom","canvas","height","border","Player","audioSrc","segments","keywords","_s","classes","isPlaying","setIsPlaying","currentTime","setCurrentTime","duration","setDuration","audioRef","canvasRef","current","addEventListener","drawWaveform","togglePlay","pause","play","handleSliderChange","event","newValue","ctx","getContext","canvasWidth","canvasHeight","clearRect","console","log","length","forEach","segment","index","startX","Start","endX","End","fillStyle","Words","NormalForm","fillRect","kw","keyword","color","currentTimeX","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","formatTime","time","minutes","Math","floor","seconds","className","children","ref","src","fileName","_jsxFileName","lineNumber","columnNumber","onClick","value","onChange","min","max","step","e","rect","getBoundingClientRect","x","clientX","left","clickTime","_c","$RefreshReg$"],"sources":["/home/gleb/my_app_test/src/audio/r6/Player.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { IconButton, Slider } from '@material-ui/core';\nimport { PlayArrow, Pause } from '@material-ui/icons';\n\ninterface PlayerProps {\n  audioSrc: string;\n  segments: SegmentModel[];\n  keywords: KeywordColor[];\n}\n\ninterface SegmentModel {\n  Start: number;\n  End: number;\n  ChannelNumber: number;\n  Words?: { NormalForm: string }[];\n}\n\ninterface KeywordColor {\n  keyword: {\n    Start: number;\n    End: number;\n    Name: string;\n    ChannelNumber: number;\n    Confidence: number;\n  };\n  color: string;\n}\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  controls: {\n    display: 'flex',\n    alignItems: 'center',\n    width: '100%',\n    marginBottom: 20,\n    // marginTop: 100,\n  },\n  canvas: {\n    width: '100%',\n    height: 100,\n    border: '1px solid black', // Added for visibility\n  },\n});\n\nconst Player: React.FC<PlayerProps> = ({ audioSrc, segments, keywords }) => {\n  const classes = useStyles();\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  \n  const audioRef = useRef<HTMLAudioElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    if (audioRef.current) {\n      audioRef.current.addEventListener('loadedmetadata', () => {\n        setDuration(audioRef.current!.duration);\n      });\n      audioRef.current.addEventListener('timeupdate', () => {\n        setCurrentTime(audioRef.current!.currentTime);\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    drawWaveform();\n  }, [segments, keywords, duration]);\n\n  const togglePlay = () => {\n    if (audioRef.current) {\n      if (isPlaying) {\n        audioRef.current.pause();\n      } else {\n        audioRef.current.play();\n      }\n      setIsPlaying(!isPlaying);\n    }\n  };\n\n  const handleSliderChange = (event: any, newValue: number | number[]) => {\n    if (audioRef.current && typeof newValue === 'number') {\n      audioRef.current.currentTime = newValue;\n      setCurrentTime(newValue);\n    }\n  };\n\n  const drawWaveform = () => {\n    if (canvasRef.current && duration > 0) {\n      const ctx = canvasRef.current.getContext('2d');\n      if (ctx) {\n        const canvasWidth = canvasRef.current.width;\n        const canvasHeight = canvasRef.current.height;\n\n        ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n        \n        console.log(`Drawing ${segments.length} segments and ${keywords.length} keywords`);\n        \n        // Draw segments\n        segments.forEach((segment, index) => {\n            const startX = (segment.Start / duration) * canvasWidth;\n            const endX = (segment.End / duration) * canvasWidth;\n            ctx.fillStyle = segment.Words && segment.Words[0].NormalForm === \"[music]\"\n              ? \"rgba(181, 201, 255, 0.5)\"\n              : \"rgba(0, 123, 255, 0.5)\";\n            ctx.fillRect(startX, 0, endX - startX, canvasHeight);\n            console.log(`Drawing segment ${index}: start=${startX}, end=${endX}, color=${ctx.fillStyle}`);\n          });\n  \n          // Draw keywords\n          keywords.forEach((kw, index) => {\n            const startX = (kw.keyword.Start / duration) * canvasWidth;\n            const width = ((kw.keyword.End - kw.keyword.Start) / duration) * canvasWidth;\n            ctx.fillStyle = kw.color;\n            ctx.fillRect(startX, 0, width, canvasHeight / 4);\n            console.log(`Drawing keyword ${index}: start=${startX}, width=${width}, color=${kw.color}`);\n          });\n  \n          // Draw current time indicator\n          const currentTimeX = (currentTime / duration) * canvasWidth;\n          ctx.strokeStyle = 'red';\n          ctx.lineWidth = 2;\n          ctx.beginPath();\n          ctx.moveTo(currentTimeX, 0);\n          ctx.lineTo(currentTimeX, canvasHeight);\n          ctx.stroke();\n        }\n      } else {\n        console.log('Canvas not ready or duration is 0');\n      }\n    };\n  \n    const formatTime = (time: number) => {\n      const minutes = Math.floor(time / 60);\n      const seconds = Math.floor(time % 60);\n      return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n    };\n  \n    return (\n      <div className={classes.root}>\n        <audio ref={audioRef} src={audioSrc} />\n        <div className={classes.controls}>\n          <IconButton onClick={togglePlay}>\n            {isPlaying ? <Pause /> : <PlayArrow />}\n          </IconButton>\n          <Slider\n            value={currentTime}\n            onChange={handleSliderChange}\n            min={0}\n            max={duration}\n            step={0.1}\n          />\n          <span>{formatTime(currentTime)} / {formatTime(duration)}</span>\n        </div>\n        <canvas \n          ref={canvasRef} \n          className={classes.canvas}\n          width={1000}\n          height={100}\n          onClick={(e) => {\n            const rect = canvasRef.current!.getBoundingClientRect();\n            const x = e.clientX - rect.left;\n            const clickTime = (x / canvasRef.current!.width) * duration;\n            if (audioRef.current) {\n              audioRef.current.currentTime = clickTime;\n            }\n          }}\n        />\n        <div>\n          <p>Segments: {segments.length}</p>\n          <p>Keywords: {keywords.length}</p>\n          <p>Duration: {duration}</p>\n        </div>\n      </div>\n    );\n  };\n  \n  export default Player;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}