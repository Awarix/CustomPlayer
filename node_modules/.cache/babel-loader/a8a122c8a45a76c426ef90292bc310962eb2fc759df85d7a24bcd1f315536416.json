{"ast":null,"code":"var _jsxFileName = \"/home/gleb/my_app_test/src/audio/r6/Player.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { IconButton, Slider } from '@material-ui/core';\nimport { PlayArrow, Pause } from '@material-ui/icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  controls: {\n    display: 'flex',\n    alignItems: 'center',\n    width: '100%',\n    marginBottom: 20,\n    marginTop: 100\n  },\n  canvas: {\n    width: '100%',\n    height: 100\n  }\n});\nconst Player = ({\n  audioSrc,\n  segments,\n  keywords\n}) => {\n  _s();\n  const classes = useStyles();\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const audioRef = useRef(null);\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    if (audioRef.current) {\n      audioRef.current.addEventListener('loadedmetadata', () => {\n        setDuration(audioRef.current.duration);\n      });\n      audioRef.current.addEventListener('timeupdate', () => {\n        setCurrentTime(audioRef.current.currentTime);\n      });\n    }\n  }, []);\n  useEffect(() => {\n    drawWaveform();\n  }, [segments, keywords]);\n  const togglePlay = () => {\n    if (audioRef.current) {\n      if (isPlaying) {\n        audioRef.current.pause();\n      } else {\n        audioRef.current.play();\n      }\n      setIsPlaying(!isPlaying);\n    }\n  };\n  const handleSliderChange = (event, newValue) => {\n    if (audioRef.current && typeof newValue === 'number') {\n      audioRef.current.currentTime = newValue;\n      setCurrentTime(newValue);\n    }\n  };\n  const drawWaveform = () => {\n    if (canvasRef.current) {\n      const ctx = canvasRef.current.getContext('2d');\n      if (ctx) {\n        ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n\n        // Draw segments\n        segments.forEach(segment => {\n          const startX = segment.Start / duration * canvasRef.current.width;\n          const endX = segment.End / duration * canvasRef.current.width;\n          ctx.fillStyle = segment.Words && segment.Words[0].NormalForm === \"[music]\" ? \"rgba(181, 201, 255, 0.5)\" : \"rgba(0, 123, 255, 0.5)\";\n          ctx.fillRect(startX, 0, endX - startX, canvasRef.current.height);\n        });\n\n        // Draw keywords\n        keywords.forEach(kw => {\n          const startX = kw.keyword.Start / duration * canvasRef.current.width;\n          const width = (kw.keyword.End - kw.keyword.Start) / duration * canvasRef.current.width;\n          ctx.fillStyle = kw.color;\n          ctx.fillRect(startX, 0, width, canvasRef.current.height / 4);\n        });\n      }\n    }\n  };\n  const formatTime = time => {\n    const minutes = Math.floor(time / 60);\n    const seconds = Math.floor(time % 60);\n    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      src: audioSrc\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.controls,\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: togglePlay,\n        children: isPlaying ? /*#__PURE__*/_jsxDEV(Pause, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 26\n        }, this) : /*#__PURE__*/_jsxDEV(PlayArrow, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 38\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        value: currentTime,\n        onChange: handleSliderChange,\n        min: 0,\n        max: duration,\n        step: 0.1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [formatTime(currentTime), \" / \", formatTime(duration)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      className: classes.canvas,\n      width: 1000,\n      height: 100,\n      onClick: e => {\n        const rect = canvasRef.current.getBoundingClientRect();\n        const x = e.clientX - rect.left;\n        const clickTime = x / canvasRef.current.width * duration;\n        if (audioRef.current) {\n          audioRef.current.currentTime = clickTime;\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 7\n  }, this);\n};\n_s(Player, \"/TQVGJupXnp8QguEZTzdLIM6ZaM=\", false, function () {\n  return [useStyles];\n});\n_c = Player;\nexport default Player;\nvar _c;\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"names":["React","useState","useRef","useEffect","makeStyles","IconButton","Slider","PlayArrow","Pause","jsxDEV","_jsxDEV","useStyles","root","width","display","flexDirection","alignItems","controls","marginBottom","marginTop","canvas","height","Player","audioSrc","segments","keywords","_s","classes","isPlaying","setIsPlaying","currentTime","setCurrentTime","duration","setDuration","audioRef","canvasRef","current","addEventListener","drawWaveform","togglePlay","pause","play","handleSliderChange","event","newValue","ctx","getContext","clearRect","forEach","segment","startX","Start","endX","End","fillStyle","Words","NormalForm","fillRect","kw","keyword","color","formatTime","time","minutes","Math","floor","seconds","className","children","ref","src","fileName","_jsxFileName","lineNumber","columnNumber","onClick","value","onChange","min","max","step","e","rect","getBoundingClientRect","x","clientX","left","clickTime","_c","$RefreshReg$"],"sources":["/home/gleb/my_app_test/src/audio/r6/Player.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { IconButton, Slider } from '@material-ui/core';\nimport { PlayArrow, Pause } from '@material-ui/icons';\n\ninterface PlayerProps {\n  audioSrc: string;\n  segments: SegmentModel[];\n  keywords: KeywordColor[];\n}\n\ninterface SegmentModel {\n  Start: number;\n  End: number;\n  ChannelNumber: number;\n  Words?: { NormalForm: string }[];\n}\n\ninterface KeywordColor {\n  keyword: {\n    Start: number;\n    End: number;\n    Name: string;\n    ChannelNumber: number;\n    Confidence: number;\n  };\n  color: string;\n}\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  controls: {\n    display: 'flex',\n    alignItems: 'center',\n    width: '100%',\n    marginBottom: 20,\n    marginTop: 100,\n  },\n  canvas: {\n    width: '100%',\n    height: 100,\n  },\n});\n\n\nconst Player: React.FC<PlayerProps> = ({ audioSrc, segments, keywords }) => {\n  const classes = useStyles();\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  \n  const audioRef = useRef<HTMLAudioElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    if (audioRef.current) {\n      audioRef.current.addEventListener('loadedmetadata', () => {\n        setDuration(audioRef.current!.duration);\n      });\n      audioRef.current.addEventListener('timeupdate', () => {\n        setCurrentTime(audioRef.current!.currentTime);\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    drawWaveform();\n  }, [segments, keywords]);\n\n  const togglePlay = () => {\n    if (audioRef.current) {\n      if (isPlaying) {\n        audioRef.current.pause();\n      } else {\n        audioRef.current.play();\n      }\n      setIsPlaying(!isPlaying);\n    }\n  };\n\n  const handleSliderChange = (event: any, newValue: number | number[]) => {\n    if (audioRef.current && typeof newValue === 'number') {\n      audioRef.current.currentTime = newValue;\n      setCurrentTime(newValue);\n    }\n  };\n\n  const drawWaveform = () => {\n    if (canvasRef.current) {\n      const ctx = canvasRef.current.getContext('2d');\n      if (ctx) {\n        ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n        \n        // Draw segments\n        segments.forEach(segment => {\n          const startX = (segment.Start / duration) * canvasRef.current!.width;\n          const endX = (segment.End / duration) * canvasRef.current!.width;\n          ctx.fillStyle = segment.Words && segment.Words[0].NormalForm === \"[music]\" \n            ? \"rgba(181, 201, 255, 0.5)\" \n            : \"rgba(0, 123, 255, 0.5)\";\n          ctx.fillRect(startX, 0, endX - startX, canvasRef.current!.height);\n        });\n\n        // Draw keywords\n        keywords.forEach(kw => {\n            const startX = (kw.keyword.Start / duration) * canvasRef.current!.width;\n            const width = ((kw.keyword.End - kw.keyword.Start) / duration) * canvasRef.current!.width;\n            ctx.fillStyle = kw.color;\n            ctx.fillRect(startX, 0, width, canvasRef.current!.height / 4);\n          });\n        }\n      }\n    };\n  \n    const formatTime = (time: number) => {\n      const minutes = Math.floor(time / 60);\n      const seconds = Math.floor(time % 60);\n      return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n    };\n  \n    return (\n      <div className={classes.root}>\n        <audio ref={audioRef} src={audioSrc} />\n        <div className={classes.controls}>\n          <IconButton onClick={togglePlay}>\n            {isPlaying ? <Pause /> : <PlayArrow />}\n          </IconButton>\n          <Slider\n            value={currentTime}\n            onChange={handleSliderChange}\n            min={0}\n            max={duration}\n            step={0.1}\n          />\n          <span>{formatTime(currentTime)} / {formatTime(duration)}</span>\n        </div>\n        <canvas \n          ref={canvasRef} \n          className={classes.canvas}\n          width={1000}\n          height={100}\n          onClick={(e) => {\n            const rect = canvasRef.current!.getBoundingClientRect();\n            const x = e.clientX - rect.left;\n            const clickTime = (x / canvasRef.current!.width) * duration;\n            if (audioRef.current) {\n              audioRef.current.currentTime = clickTime;\n            }\n          }}\n        />\n      </div>\n    );\n  };\n  \n  export default Player;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,SAASC,UAAU,QAAQ,0BAA0B;AACrD,SAASC,UAAU,EAAEC,MAAM,QAAQ,mBAAmB;AACtD,SAASC,SAAS,EAAEC,KAAK,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AA0BtD,MAAMC,SAAS,GAAGP,UAAU,CAAC;EAC3BQ,IAAI,EAAE;IACJC,KAAK,EAAE,MAAM;IACbC,OAAO,EAAE,MAAM;IACfC,aAAa,EAAE,QAAQ;IACvBC,UAAU,EAAE;EACd,CAAC;EACDC,QAAQ,EAAE;IACRH,OAAO,EAAE,MAAM;IACfE,UAAU,EAAE,QAAQ;IACpBH,KAAK,EAAE,MAAM;IACbK,YAAY,EAAE,EAAE;IAChBC,SAAS,EAAE;EACb,CAAC;EACDC,MAAM,EAAE;IACNP,KAAK,EAAE,MAAM;IACbQ,MAAM,EAAE;EACV;AACF,CAAC,CAAC;AAGF,MAAMC,MAA6B,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,QAAQ;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1E,MAAMC,OAAO,GAAGhB,SAAS,CAAC,CAAC;EAC3B,MAAM,CAACiB,SAAS,EAAEC,YAAY,CAAC,GAAG5B,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAAC6B,WAAW,EAAEC,cAAc,CAAC,GAAG9B,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAAC+B,QAAQ,EAAEC,WAAW,CAAC,GAAGhC,QAAQ,CAAC,CAAC,CAAC;EAE3C,MAAMiC,QAAQ,GAAGhC,MAAM,CAAmB,IAAI,CAAC;EAC/C,MAAMiC,SAAS,GAAGjC,MAAM,CAAoB,IAAI,CAAC;EAEjDC,SAAS,CAAC,MAAM;IACd,IAAI+B,QAAQ,CAACE,OAAO,EAAE;MACpBF,QAAQ,CAACE,OAAO,CAACC,gBAAgB,CAAC,gBAAgB,EAAE,MAAM;QACxDJ,WAAW,CAACC,QAAQ,CAACE,OAAO,CAAEJ,QAAQ,CAAC;MACzC,CAAC,CAAC;MACFE,QAAQ,CAACE,OAAO,CAACC,gBAAgB,CAAC,YAAY,EAAE,MAAM;QACpDN,cAAc,CAACG,QAAQ,CAACE,OAAO,CAAEN,WAAW,CAAC;MAC/C,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,EAAE,CAAC;EAEN3B,SAAS,CAAC,MAAM;IACdmC,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,CAACd,QAAQ,EAAEC,QAAQ,CAAC,CAAC;EAExB,MAAMc,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAIL,QAAQ,CAACE,OAAO,EAAE;MACpB,IAAIR,SAAS,EAAE;QACbM,QAAQ,CAACE,OAAO,CAACI,KAAK,CAAC,CAAC;MAC1B,CAAC,MAAM;QACLN,QAAQ,CAACE,OAAO,CAACK,IAAI,CAAC,CAAC;MACzB;MACAZ,YAAY,CAAC,CAACD,SAAS,CAAC;IAC1B;EACF,CAAC;EAED,MAAMc,kBAAkB,GAAGA,CAACC,KAAU,EAAEC,QAA2B,KAAK;IACtE,IAAIV,QAAQ,CAACE,OAAO,IAAI,OAAOQ,QAAQ,KAAK,QAAQ,EAAE;MACpDV,QAAQ,CAACE,OAAO,CAACN,WAAW,GAAGc,QAAQ;MACvCb,cAAc,CAACa,QAAQ,CAAC;IAC1B;EACF,CAAC;EAED,MAAMN,YAAY,GAAGA,CAAA,KAAM;IACzB,IAAIH,SAAS,CAACC,OAAO,EAAE;MACrB,MAAMS,GAAG,GAAGV,SAAS,CAACC,OAAO,CAACU,UAAU,CAAC,IAAI,CAAC;MAC9C,IAAID,GAAG,EAAE;QACPA,GAAG,CAACE,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEZ,SAAS,CAACC,OAAO,CAACvB,KAAK,EAAEsB,SAAS,CAACC,OAAO,CAACf,MAAM,CAAC;;QAEtE;QACAG,QAAQ,CAACwB,OAAO,CAACC,OAAO,IAAI;UAC1B,MAAMC,MAAM,GAAID,OAAO,CAACE,KAAK,GAAGnB,QAAQ,GAAIG,SAAS,CAACC,OAAO,CAAEvB,KAAK;UACpE,MAAMuC,IAAI,GAAIH,OAAO,CAACI,GAAG,GAAGrB,QAAQ,GAAIG,SAAS,CAACC,OAAO,CAAEvB,KAAK;UAChEgC,GAAG,CAACS,SAAS,GAAGL,OAAO,CAACM,KAAK,IAAIN,OAAO,CAACM,KAAK,CAAC,CAAC,CAAC,CAACC,UAAU,KAAK,SAAS,GACtE,0BAA0B,GAC1B,wBAAwB;UAC5BX,GAAG,CAACY,QAAQ,CAACP,MAAM,EAAE,CAAC,EAAEE,IAAI,GAAGF,MAAM,EAAEf,SAAS,CAACC,OAAO,CAAEf,MAAM,CAAC;QACnE,CAAC,CAAC;;QAEF;QACAI,QAAQ,CAACuB,OAAO,CAACU,EAAE,IAAI;UACnB,MAAMR,MAAM,GAAIQ,EAAE,CAACC,OAAO,CAACR,KAAK,GAAGnB,QAAQ,GAAIG,SAAS,CAACC,OAAO,CAAEvB,KAAK;UACvE,MAAMA,KAAK,GAAI,CAAC6C,EAAE,CAACC,OAAO,CAACN,GAAG,GAAGK,EAAE,CAACC,OAAO,CAACR,KAAK,IAAInB,QAAQ,GAAIG,SAAS,CAACC,OAAO,CAAEvB,KAAK;UACzFgC,GAAG,CAACS,SAAS,GAAGI,EAAE,CAACE,KAAK;UACxBf,GAAG,CAACY,QAAQ,CAACP,MAAM,EAAE,CAAC,EAAErC,KAAK,EAAEsB,SAAS,CAACC,OAAO,CAAEf,MAAM,GAAG,CAAC,CAAC;QAC/D,CAAC,CAAC;MACJ;IACF;EACF,CAAC;EAED,MAAMwC,UAAU,GAAIC,IAAY,IAAK;IACnC,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACH,IAAI,GAAG,EAAE,CAAC;IACrC,MAAMI,OAAO,GAAGF,IAAI,CAACC,KAAK,CAACH,IAAI,GAAG,EAAE,CAAC;IACrC,OAAQ,GAAEC,OAAQ,IAAGG,OAAO,GAAG,EAAE,GAAG,GAAG,GAAG,EAAG,GAAEA,OAAQ,EAAC;EAC1D,CAAC;EAED,oBACExD,OAAA;IAAKyD,SAAS,EAAExC,OAAO,CAACf,IAAK;IAAAwD,QAAA,gBAC3B1D,OAAA;MAAO2D,GAAG,EAAEnC,QAAS;MAACoC,GAAG,EAAE/C;IAAS;MAAAgD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACvChE,OAAA;MAAKyD,SAAS,EAAExC,OAAO,CAACV,QAAS;MAAAmD,QAAA,gBAC/B1D,OAAA,CAACL,UAAU;QAACsE,OAAO,EAAEpC,UAAW;QAAA6B,QAAA,EAC7BxC,SAAS,gBAAGlB,OAAA,CAACF,KAAK;UAAA+D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,gBAAGhE,OAAA,CAACH,SAAS;UAAAgE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5B,CAAC,eACbhE,OAAA,CAACJ,MAAM;QACLsE,KAAK,EAAE9C,WAAY;QACnB+C,QAAQ,EAAEnC,kBAAmB;QAC7BoC,GAAG,EAAE,CAAE;QACPC,GAAG,EAAE/C,QAAS;QACdgD,IAAI,EAAE;MAAI;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACX,CAAC,eACFhE,OAAA;QAAA0D,QAAA,GAAOP,UAAU,CAAC/B,WAAW,CAAC,EAAC,KAAG,EAAC+B,UAAU,CAAC7B,QAAQ,CAAC;MAAA;QAAAuC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5D,CAAC,eACNhE,OAAA;MACE2D,GAAG,EAAElC,SAAU;MACfgC,SAAS,EAAExC,OAAO,CAACP,MAAO;MAC1BP,KAAK,EAAE,IAAK;MACZQ,MAAM,EAAE,GAAI;MACZsD,OAAO,EAAGM,CAAC,IAAK;QACd,MAAMC,IAAI,GAAG/C,SAAS,CAACC,OAAO,CAAE+C,qBAAqB,CAAC,CAAC;QACvD,MAAMC,CAAC,GAAGH,CAAC,CAACI,OAAO,GAAGH,IAAI,CAACI,IAAI;QAC/B,MAAMC,SAAS,GAAIH,CAAC,GAAGjD,SAAS,CAACC,OAAO,CAAEvB,KAAK,GAAImB,QAAQ;QAC3D,IAAIE,QAAQ,CAACE,OAAO,EAAE;UACpBF,QAAQ,CAACE,OAAO,CAACN,WAAW,GAAGyD,SAAS;QAC1C;MACF;IAAE;MAAAhB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAChD,EAAA,CA3GEJ,MAA6B;EAAA,QACjBX,SAAS;AAAA;AAAA6E,EAAA,GADrBlE,MAA6B;AA6GjC,eAAeA,MAAM;AAAC,IAAAkE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}