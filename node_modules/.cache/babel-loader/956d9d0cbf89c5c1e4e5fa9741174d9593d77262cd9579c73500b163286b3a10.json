{"ast":null,"code":"var _jsxFileName = \"/home/gleb/my_app_test/src/Custom/Wednesday/WaveFormZoomTest.tsx\",\n  _s = $RefreshSig$();\n// import React, { useRef, useEffect, useState } from 'react';\n\n// interface WaveformProps {\n//   audioUrl: string;\n// }\n\n// const WaveFormZoomTest: React.FC<WaveformProps> = ({ audioUrl }) => {\n//   const canvasRef = useRef<HTMLCanvasElement>(null);\n//   const [zoom, setZoom] = useState(1);\n//   const [scrollPosition, setScrollPosition] = useState(0);\n//   const [audioData, setAudioData] = useState<number[]>([]);\n\n//   useEffect(() => {\n//     const fetchAudio = async () => {\n//       const response = await fetch(audioUrl);\n//       const arrayBuffer = await response.arrayBuffer();\n//       const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n//       const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n//       const channelData = audioBuffer.getChannelData(0);\n//       const samples = 1000;\n//       const blockSize = Math.floor(channelData.length / samples);\n//       const filteredData = [];\n//       for (let i = 0; i < samples; i++) {\n//         const blockStart = blockSize * i;\n//         let sum = 0;\n//         for (let j = 0; j < blockSize; j++) {\n//           sum += Math.abs(channelData[blockStart + j]);\n//         }\n//         filteredData.push(sum / blockSize);\n//       }\n//       setAudioData(filteredData);\n//     };\n\n//     fetchAudio();\n//   }, [audioUrl]);\n\n//   useEffect(() => {\n//     const canvas = canvasRef.current;\n//     if (!canvas) return;\n\n//     const ctx = canvas.getContext('2d');\n//     if (!ctx) return;\n\n//     const dpr = window.devicePixelRatio || 1;\n//     const parentWidth = canvas.parentElement?.clientWidth || 0;\n//     canvas.width = parentWidth * 0.8 * dpr;\n//     canvas.height = 300 * dpr;\n//     canvas.style.width = `${parentWidth * 0.8}px`;\n//     canvas.style.height = '300px';\n//     ctx.scale(dpr, dpr);\n\n//     const drawWaveform = () => {\n//       ctx.clearRect(0, 0, canvas.width, canvas.height);\n//       ctx.beginPath();\n//       ctx.moveTo(0, canvas.height / 2);\n//       const width = canvas.width / dpr;\n//       const height = canvas.height / dpr;\n//       const step = width / (audioData.length * zoom);\n//       for (let i = 0; i < audioData.length; i++) {\n//         const x = i * step - scrollPosition;\n//         if (x < 0) continue;\n//         if (x > width) break;\n//         const y = (1 - audioData[i]) * height / 2;\n//         ctx.lineTo(x, y);\n//       }\n//       ctx.strokeStyle = 'blue';\n//       ctx.stroke();\n//     };\n\n//     drawWaveform();\n//   }, [audioData, zoom, scrollPosition]);\n\n//   const handleZoomIn = () => {\n//     setZoom(prev => Math.min(prev * 2, 64));\n//   };\n\n//   const handleZoomOut = () => {\n//     setZoom(prev => Math.max(prev / 2, 1));\n//   };\n\n//   const handleScroll = (e: React.ChangeEvent<HTMLInputElement>) => {\n//     setScrollPosition(Number(e.target.value));\n//   };\n\n//   return (\n//     <div style={{ width: '100%' }}>\n//       <div style={{ width: '80%', margin: '0 auto' }}>\n//         <canvas ref={canvasRef} style={{ border: '1px solid black' }} />\n//       </div>\n//       <div>\n//         <button onClick={handleZoomOut} disabled={zoom === 1}>Zoom Out</button>\n//         <button onClick={handleZoomIn} disabled={zoom === 64}>Zoom In</button>\n//       </div>\n//       {zoom > 1 && (\n//         <input\n//           type=\"range\"\n//           min={0}\n//           max={canvasRef.current ? (canvasRef.current.width / window.devicePixelRatio) * (1 - 1/zoom) : 0}\n//           value={scrollPosition}\n//           onChange={handleScroll}\n//           style={{ width: '80%', margin: '10px auto', display: 'block' }}\n//         />\n//       )}\n//     </div>\n//   );\n// };\n\n// export default WaveFormZoomTest;\n\n// import React, { useRef, useEffect, useState } from 'react';\n\n// interface WaveformProps {\n//   audioUrl: string;\n// }\n\n// const WaveFormZoomTest: React.FC<WaveformProps> = ({ audioUrl }) => {\n//   const canvasRef = useRef<HTMLCanvasElement>(null);\n//   const [zoom, setZoom] = useState(1);\n//   const [scrollPosition, setScrollPosition] = useState(0);\n//   const [audioData, setAudioData] = useState<number[]>([]);\n\n//   useEffect(() => {\n//     const fetchAudio = async () => {\n//       const response = await fetch(audioUrl);\n//       const arrayBuffer = await response.arrayBuffer();\n//       const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n//       const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n//       const channelData = audioBuffer.getChannelData(0);\n//       const samples = 1000;\n//       const blockSize = Math.floor(channelData.length / samples);\n//       const filteredData = [];\n//       for (let i = 0; i < samples; i++) {\n//         const blockStart = blockSize * i;\n//         let sum = 0;\n//         for (let j = 0; j < blockSize; j++) {\n//           sum += Math.abs(channelData[blockStart + j]);\n//         }\n//         filteredData.push(sum / blockSize);\n//       }\n//       setAudioData(filteredData);\n//     };\n\n//     fetchAudio();\n//   }, [audioUrl]);\n\n//   useEffect(() => {\n//     const canvas = canvasRef.current;\n//     if (!canvas) return;\n\n//     const ctx = canvas.getContext('2d');\n//     if (!ctx) return;\n\n//     const dpr = window.devicePixelRatio || 1;\n//     const parentWidth = canvas.parentElement?.clientWidth || 0;\n//     const canvasWidth = parentWidth * 0.8;\n//     canvas.width = canvasWidth * dpr;\n//     canvas.height = 300 * dpr;\n//     canvas.style.width = `${canvasWidth}px`;\n//     canvas.style.height = '300px';\n//     ctx.scale(dpr, dpr);\n\n//     const drawWaveform = () => {\n//       ctx.clearRect(0, 0, canvas.width, canvas.height);\n//       ctx.beginPath();\n\n//       const width = canvasWidth;\n//       const height = 300;\n//       const step = (width * zoom) / audioData.length;\n\n//       for (let i = 0; i < audioData.length; i++) {\n//         const x = i * step - scrollPosition;\n//         if (x < -step) continue;\n//         if (x > width) break;\n//         const y = (1 - audioData[i]) * height / 2;\n//         if (i === 0) {\n//           ctx.moveTo(x, y);\n//         } else {\n//           ctx.lineTo(x, y);\n//         }\n//       }\n\n//       ctx.strokeStyle = 'blue';\n//       ctx.stroke();\n//     };\n\n//     drawWaveform();\n//   }, [audioData, zoom, scrollPosition]);\n\n//   const handleZoomIn = () => {\n//     setZoom(prev => {\n//       const newZoom = Math.min(prev * 2, 64);\n//       setScrollPosition(prev => prev * (newZoom / prev));\n//       return newZoom;\n//     });\n//   };\n\n//   const handleZoomOut = () => {\n//     setZoom(prev => {\n//       const newZoom = Math.max(prev / 2, 1);\n//       setScrollPosition(prev => prev * (newZoom / prev));\n//       return newZoom;\n//     });\n//   };\n\n//   const handleScroll = (e: React.ChangeEvent<HTMLInputElement>) => {\n//     setScrollPosition(Number(e.target.value));\n//   };\n\n//   return (\n//     <div style={{ width: '100%' }}>\n//       <div style={{ width: '80%', margin: '0 auto' }}>\n//         <canvas ref={canvasRef} style={{ border: '1px solid black' }} />\n//       </div>\n//       <div>\n//         <button onClick={handleZoomOut} disabled={zoom === 1}>Zoom Out</button>\n//         <button onClick={handleZoomIn} disabled={zoom === 64}>Zoom In</button>\n//       </div>\n//       {zoom > 1 && (\n//         <input\n//           type=\"range\"\n//           min={0}\n//           max={canvasRef.current ? (canvasRef.current.width / window.devicePixelRatio) * (zoom - 1) : 0}\n//           value={scrollPosition}\n//           onChange={handleScroll}\n//           style={{ width: '80%', margin: '10px auto', display: 'block' }}\n//         />\n//       )}\n//     </div>\n//   );\n// };\n\n// export default WaveFormZoomTest;\n\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WaveFormZoomTest = ({\n  audioUrl\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [zoom, setZoom] = useState(1);\n  const [scrollPosition, setScrollPosition] = useState(0);\n  const [audioData, setAudioData] = useState([]);\n  const drawWaveform = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    const dpr = window.devicePixelRatio || 1;\n    const width = canvas.width / dpr;\n    const height = canvas.height / dpr;\n    ctx.clearRect(0, 0, width, height);\n    ctx.beginPath();\n    const step = width / (audioData.length / zoom);\n    const startIndex = Math.floor(scrollPosition / step);\n    const endIndex = Math.min(startIndex + Math.ceil(width / step), audioData.length);\n    for (let i = startIndex; i < endIndex; i++) {\n      const x = (i - startIndex) * step;\n      const y = (1 - audioData[i]) * height / 2;\n      if (i === startIndex) {\n        ctx.moveTo(x, y);\n      } else {\n        ctx.lineTo(x, y);\n      }\n    }\n    ctx.strokeStyle = 'blue';\n    ctx.stroke();\n  }, [audioData, zoom, scrollPosition]);\n  useEffect(() => {\n    const fetchAudio = async () => {\n      const response = await fetch(audioUrl);\n      const arrayBuffer = await response.arrayBuffer();\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n      const channelData = audioBuffer.getChannelData(0);\n      const samples = 1000;\n      const blockSize = Math.floor(channelData.length / samples);\n      const filteredData = [];\n      for (let i = 0; i < samples; i++) {\n        const blockStart = blockSize * i;\n        let sum = 0;\n        for (let j = 0; j < blockSize; j++) {\n          sum += Math.abs(channelData[blockStart + j]);\n        }\n        filteredData.push(sum / blockSize);\n      }\n      setAudioData(filteredData);\n    };\n    fetchAudio();\n  }, [audioUrl]);\n  useEffect(() => {\n    var _canvas$parentElement;\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const dpr = window.devicePixelRatio || 1;\n    const parentWidth = ((_canvas$parentElement = canvas.parentElement) === null || _canvas$parentElement === void 0 ? void 0 : _canvas$parentElement.clientWidth) || 0;\n    const canvasWidth = parentWidth * 0.8;\n    canvas.width = canvasWidth * dpr;\n    canvas.height = 300 * dpr;\n    canvas.style.width = `${canvasWidth}px`;\n    canvas.style.height = '300px';\n    drawWaveform();\n  }, [drawWaveform]);\n  const handleZoom = direction => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const width = canvas.width / (window.devicePixelRatio || 1);\n    const centerPosition = scrollPosition + width / 2;\n    setZoom(prevZoom => {\n      const newZoom = direction === 'in' ? Math.min(prevZoom * 2, 64) : Math.max(prevZoom / 2, 1);\n      const newScrollPosition = centerPosition * (newZoom / prevZoom) - width / 2;\n      setScrollPosition(Math.max(0, newScrollPosition));\n      return newZoom;\n    });\n  };\n  const handleScroll = e => {\n    setScrollPosition(Number(e.target.value));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '2000px',\n        margin: '0 auto'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        style: {\n          border: '1px solid black'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleZoom('out'),\n        disabled: zoom === 1,\n        children: \"Zoom Out\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleZoom('in'),\n        disabled: zoom === 64,\n        children: \"Zoom In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 7\n    }, this), zoom > 1 && /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      min: 0,\n      max: canvasRef.current ? canvasRef.current.width / window.devicePixelRatio * (zoom - 1) : 0,\n      value: scrollPosition,\n      onChange: handleScroll,\n      style: {\n        width: '2000px',\n        margin: '10px auto',\n        display: 'block'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 339,\n    columnNumber: 5\n  }, this);\n};\n_s(WaveFormZoomTest, \"bJsBbjrA+narpHLwAaobRkaZwLU=\");\n_c = WaveFormZoomTest;\nexport default WaveFormZoomTest;\nvar _c;\n$RefreshReg$(_c, \"WaveFormZoomTest\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","jsxDEV","_jsxDEV","WaveFormZoomTest","audioUrl","_s","canvasRef","zoom","setZoom","scrollPosition","setScrollPosition","audioData","setAudioData","drawWaveform","canvas","current","ctx","getContext","dpr","window","devicePixelRatio","width","height","clearRect","beginPath","step","length","startIndex","Math","floor","endIndex","min","ceil","i","x","y","moveTo","lineTo","strokeStyle","stroke","fetchAudio","response","fetch","arrayBuffer","audioContext","AudioContext","webkitAudioContext","audioBuffer","decodeAudioData","channelData","getChannelData","samples","blockSize","filteredData","blockStart","sum","j","abs","push","_canvas$parentElement","parentWidth","parentElement","clientWidth","canvasWidth","style","handleZoom","direction","centerPosition","prevZoom","newZoom","max","newScrollPosition","handleScroll","e","Number","target","value","children","margin","ref","border","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","type","onChange","display","_c","$RefreshReg$"],"sources":["/home/gleb/my_app_test/src/Custom/Wednesday/WaveFormZoomTest.tsx"],"sourcesContent":["// import React, { useRef, useEffect, useState } from 'react';\n\n// interface WaveformProps {\n//   audioUrl: string;\n// }\n\n// const WaveFormZoomTest: React.FC<WaveformProps> = ({ audioUrl }) => {\n//   const canvasRef = useRef<HTMLCanvasElement>(null);\n//   const [zoom, setZoom] = useState(1);\n//   const [scrollPosition, setScrollPosition] = useState(0);\n//   const [audioData, setAudioData] = useState<number[]>([]);\n\n//   useEffect(() => {\n//     const fetchAudio = async () => {\n//       const response = await fetch(audioUrl);\n//       const arrayBuffer = await response.arrayBuffer();\n//       const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n//       const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n//       const channelData = audioBuffer.getChannelData(0);\n//       const samples = 1000;\n//       const blockSize = Math.floor(channelData.length / samples);\n//       const filteredData = [];\n//       for (let i = 0; i < samples; i++) {\n//         const blockStart = blockSize * i;\n//         let sum = 0;\n//         for (let j = 0; j < blockSize; j++) {\n//           sum += Math.abs(channelData[blockStart + j]);\n//         }\n//         filteredData.push(sum / blockSize);\n//       }\n//       setAudioData(filteredData);\n//     };\n\n//     fetchAudio();\n//   }, [audioUrl]);\n\n//   useEffect(() => {\n//     const canvas = canvasRef.current;\n//     if (!canvas) return;\n\n//     const ctx = canvas.getContext('2d');\n//     if (!ctx) return;\n\n//     const dpr = window.devicePixelRatio || 1;\n//     const parentWidth = canvas.parentElement?.clientWidth || 0;\n//     canvas.width = parentWidth * 0.8 * dpr;\n//     canvas.height = 300 * dpr;\n//     canvas.style.width = `${parentWidth * 0.8}px`;\n//     canvas.style.height = '300px';\n//     ctx.scale(dpr, dpr);\n\n//     const drawWaveform = () => {\n//       ctx.clearRect(0, 0, canvas.width, canvas.height);\n//       ctx.beginPath();\n//       ctx.moveTo(0, canvas.height / 2);\n//       const width = canvas.width / dpr;\n//       const height = canvas.height / dpr;\n//       const step = width / (audioData.length * zoom);\n//       for (let i = 0; i < audioData.length; i++) {\n//         const x = i * step - scrollPosition;\n//         if (x < 0) continue;\n//         if (x > width) break;\n//         const y = (1 - audioData[i]) * height / 2;\n//         ctx.lineTo(x, y);\n//       }\n//       ctx.strokeStyle = 'blue';\n//       ctx.stroke();\n//     };\n\n//     drawWaveform();\n//   }, [audioData, zoom, scrollPosition]);\n\n//   const handleZoomIn = () => {\n//     setZoom(prev => Math.min(prev * 2, 64));\n//   };\n\n//   const handleZoomOut = () => {\n//     setZoom(prev => Math.max(prev / 2, 1));\n//   };\n\n//   const handleScroll = (e: React.ChangeEvent<HTMLInputElement>) => {\n//     setScrollPosition(Number(e.target.value));\n//   };\n\n//   return (\n//     <div style={{ width: '100%' }}>\n//       <div style={{ width: '80%', margin: '0 auto' }}>\n//         <canvas ref={canvasRef} style={{ border: '1px solid black' }} />\n//       </div>\n//       <div>\n//         <button onClick={handleZoomOut} disabled={zoom === 1}>Zoom Out</button>\n//         <button onClick={handleZoomIn} disabled={zoom === 64}>Zoom In</button>\n//       </div>\n//       {zoom > 1 && (\n//         <input\n//           type=\"range\"\n//           min={0}\n//           max={canvasRef.current ? (canvasRef.current.width / window.devicePixelRatio) * (1 - 1/zoom) : 0}\n//           value={scrollPosition}\n//           onChange={handleScroll}\n//           style={{ width: '80%', margin: '10px auto', display: 'block' }}\n//         />\n//       )}\n//     </div>\n//   );\n// };\n\n// export default WaveFormZoomTest;\n\n\n// import React, { useRef, useEffect, useState } from 'react';\n\n// interface WaveformProps {\n//   audioUrl: string;\n// }\n\n// const WaveFormZoomTest: React.FC<WaveformProps> = ({ audioUrl }) => {\n//   const canvasRef = useRef<HTMLCanvasElement>(null);\n//   const [zoom, setZoom] = useState(1);\n//   const [scrollPosition, setScrollPosition] = useState(0);\n//   const [audioData, setAudioData] = useState<number[]>([]);\n\n//   useEffect(() => {\n//     const fetchAudio = async () => {\n//       const response = await fetch(audioUrl);\n//       const arrayBuffer = await response.arrayBuffer();\n//       const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n//       const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n//       const channelData = audioBuffer.getChannelData(0);\n//       const samples = 1000;\n//       const blockSize = Math.floor(channelData.length / samples);\n//       const filteredData = [];\n//       for (let i = 0; i < samples; i++) {\n//         const blockStart = blockSize * i;\n//         let sum = 0;\n//         for (let j = 0; j < blockSize; j++) {\n//           sum += Math.abs(channelData[blockStart + j]);\n//         }\n//         filteredData.push(sum / blockSize);\n//       }\n//       setAudioData(filteredData);\n//     };\n\n//     fetchAudio();\n//   }, [audioUrl]);\n\n//   useEffect(() => {\n//     const canvas = canvasRef.current;\n//     if (!canvas) return;\n\n//     const ctx = canvas.getContext('2d');\n//     if (!ctx) return;\n\n//     const dpr = window.devicePixelRatio || 1;\n//     const parentWidth = canvas.parentElement?.clientWidth || 0;\n//     const canvasWidth = parentWidth * 0.8;\n//     canvas.width = canvasWidth * dpr;\n//     canvas.height = 300 * dpr;\n//     canvas.style.width = `${canvasWidth}px`;\n//     canvas.style.height = '300px';\n//     ctx.scale(dpr, dpr);\n\n//     const drawWaveform = () => {\n//       ctx.clearRect(0, 0, canvas.width, canvas.height);\n//       ctx.beginPath();\n      \n//       const width = canvasWidth;\n//       const height = 300;\n//       const step = (width * zoom) / audioData.length;\n      \n//       for (let i = 0; i < audioData.length; i++) {\n//         const x = i * step - scrollPosition;\n//         if (x < -step) continue;\n//         if (x > width) break;\n//         const y = (1 - audioData[i]) * height / 2;\n//         if (i === 0) {\n//           ctx.moveTo(x, y);\n//         } else {\n//           ctx.lineTo(x, y);\n//         }\n//       }\n      \n//       ctx.strokeStyle = 'blue';\n//       ctx.stroke();\n//     };\n\n//     drawWaveform();\n//   }, [audioData, zoom, scrollPosition]);\n\n//   const handleZoomIn = () => {\n//     setZoom(prev => {\n//       const newZoom = Math.min(prev * 2, 64);\n//       setScrollPosition(prev => prev * (newZoom / prev));\n//       return newZoom;\n//     });\n//   };\n\n//   const handleZoomOut = () => {\n//     setZoom(prev => {\n//       const newZoom = Math.max(prev / 2, 1);\n//       setScrollPosition(prev => prev * (newZoom / prev));\n//       return newZoom;\n//     });\n//   };\n\n//   const handleScroll = (e: React.ChangeEvent<HTMLInputElement>) => {\n//     setScrollPosition(Number(e.target.value));\n//   };\n\n//   return (\n//     <div style={{ width: '100%' }}>\n//       <div style={{ width: '80%', margin: '0 auto' }}>\n//         <canvas ref={canvasRef} style={{ border: '1px solid black' }} />\n//       </div>\n//       <div>\n//         <button onClick={handleZoomOut} disabled={zoom === 1}>Zoom Out</button>\n//         <button onClick={handleZoomIn} disabled={zoom === 64}>Zoom In</button>\n//       </div>\n//       {zoom > 1 && (\n//         <input\n//           type=\"range\"\n//           min={0}\n//           max={canvasRef.current ? (canvasRef.current.width / window.devicePixelRatio) * (zoom - 1) : 0}\n//           value={scrollPosition}\n//           onChange={handleScroll}\n//           style={{ width: '80%', margin: '10px auto', display: 'block' }}\n//         />\n//       )}\n//     </div>\n//   );\n// };\n\n// export default WaveFormZoomTest;\n\n\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\n\ninterface WaveformProps {\n  audioUrl: string;\n}\n\nconst WaveFormZoomTest: React.FC<WaveformProps> = ({ audioUrl }) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [zoom, setZoom] = useState(1);\n  const [scrollPosition, setScrollPosition] = useState(0);\n  const [audioData, setAudioData] = useState<number[]>([]);\n\n  const drawWaveform = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    const dpr = window.devicePixelRatio || 1;\n    const width = canvas.width / dpr;\n    const height = canvas.height / dpr;\n\n    ctx.clearRect(0, 0, width, height);\n    ctx.beginPath();\n\n    const step = width / (audioData.length / zoom);\n    const startIndex = Math.floor(scrollPosition / step);\n    const endIndex = Math.min(startIndex + Math.ceil(width / step), audioData.length);\n\n    for (let i = startIndex; i < endIndex; i++) {\n      const x = (i - startIndex) * step;\n      const y = (1 - audioData[i]) * height / 2;\n      if (i === startIndex) {\n        ctx.moveTo(x, y);\n      } else {\n        ctx.lineTo(x, y);\n      }\n    }\n\n    ctx.strokeStyle = 'blue';\n    ctx.stroke();\n  }, [audioData, zoom, scrollPosition]);\n\n  useEffect(() => {\n    const fetchAudio = async () => {\n      const response = await fetch(audioUrl);\n      const arrayBuffer = await response.arrayBuffer();\n      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n      const channelData = audioBuffer.getChannelData(0);\n      const samples = 1000;\n      const blockSize = Math.floor(channelData.length / samples);\n      const filteredData = [];\n      for (let i = 0; i < samples; i++) {\n        const blockStart = blockSize * i;\n        let sum = 0;\n        for (let j = 0; j < blockSize; j++) {\n          sum += Math.abs(channelData[blockStart + j]);\n        }\n        filteredData.push(sum / blockSize);\n      }\n      setAudioData(filteredData);\n    };\n\n    fetchAudio();\n  }, [audioUrl]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const dpr = window.devicePixelRatio || 1;\n    const parentWidth = canvas.parentElement?.clientWidth || 0;\n    const canvasWidth = parentWidth * 0.8;\n    canvas.width = canvasWidth * dpr;\n    canvas.height = 300 * dpr;\n    canvas.style.width = `${canvasWidth}px`;\n    canvas.style.height = '300px';\n\n    drawWaveform();\n  }, [drawWaveform]);\n\n  const handleZoom = (direction: 'in' | 'out') => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const width = canvas.width / (window.devicePixelRatio || 1);\n    const centerPosition = scrollPosition + width / 2;\n\n    setZoom(prevZoom => {\n      const newZoom = direction === 'in' ? Math.min(prevZoom * 2, 64) : Math.max(prevZoom / 2, 1);\n      const newScrollPosition = centerPosition * (newZoom / prevZoom) - width / 2;\n      setScrollPosition(Math.max(0, newScrollPosition));\n      return newZoom;\n    });\n  };\n\n  const handleScroll = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setScrollPosition(Number(e.target.value));\n  };\n\n  return (\n    <div style={{ width: '100%' }}>\n      <div style={{ width: '2000px', margin: '0 auto' }}>\n        <canvas ref={canvasRef} style={{ border: '1px solid black' }} />\n      </div>\n      <div>\n        <button onClick={() => handleZoom('out')} disabled={zoom === 1}>Zoom Out</button>\n        <button onClick={() => handleZoom('in')} disabled={zoom === 64}>Zoom In</button>\n      </div>\n      {zoom > 1 && (\n        <input\n          type=\"range\"\n          min={0}\n          max={canvasRef.current ? (canvasRef.current.width / window.devicePixelRatio) * (zoom - 1) : 0}\n          value={scrollPosition}\n          onChange={handleScroll}\n          style={{ width: '2000px', margin: '10px auto', display: 'block' }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default WaveFormZoomTest;"],"mappings":";;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAMxE,MAAMC,gBAAyC,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAClE,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}