{"ast":null,"code":"var _jsxFileName = \"/home/gleb/my_app_test/src/components/FontButton.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FontButton = ({\n  editor\n}) => {\n  _s();\n  const [selectedFont, setSelectedFont] = useState('Roboto');\n  const handleFontChange = e => {\n    const font = e.target.value;\n    // editor.chain().focus().setFontFamily({font}).run();\n    editor.chain().focus().setFontFamily(font).run();\n    setSelectedFont(font);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"fontSelect\",\n      children: \"Select Font:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"fontSelect\",\n      value: selectedFont,\n      onChange: handleFontChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Sans-serif\",\n        children: \"Default\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Inter\",\n        children: \"Inter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Comic Sans MS, Comic Sans\",\n        children: \"Comic Sans\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Arial\",\n        children: \"Arial \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Times New Roman\",\n        children: \"Times New Roman\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"cursive\",\n        children: \"cursive\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this);\n};\n_s(FontButton, \"PMF1hVzbAg+6GtOIKn4KLOqoT6A=\");\n_c = FontButton;\nexport default FontButton;\nvar _c;\n$RefreshReg$(_c, \"FontButton\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","FontButton","editor","_s","selectedFont","setSelectedFont","handleFontChange","e","font","target","value","chain","focus","setFontFamily","run","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","onChange","_c","$RefreshReg$"],"sources":["/home/gleb/my_app_test/src/components/FontButton.tsx"],"sourcesContent":["import { Editor } from '@tiptap/react';\nimport React, { useState } from 'react';\n\ninterface FontButtonProps {\n    editor: Editor\n}\n\nconst FontButton: React.FC<FontButtonProps> = ({ editor }) => {\n    const [selectedFont, setSelectedFont] = useState('Roboto');\n\n    const handleFontChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        const font = e.target.value;\n        // editor.chain().focus().setFontFamily({font}).run();\n        editor.chain().focus().setFontFamily(font).run();\n        setSelectedFont(font);\n    };\n\n    return (\n        <div>\n            <label htmlFor=\"fontSelect\">Select Font:</label>\n            <select id=\"fontSelect\" value={selectedFont} onChange={handleFontChange}>\n                <option value=\"Sans-serif\">Default</option>\n                <option value=\"Inter\">Inter</option>\n                <option value=\"Comic Sans MS, Comic Sans\">Comic Sans</option>\n                <option value=\"Arial\">Arial </option>\n                <option value=\"Times New Roman\">Times New Roman</option>\n                <option value=\"cursive\">cursive</option>\n                \n            </select>\n        </div>\n    );\n};\n\nexport default FontButton;\n"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAMxC,MAAMC,UAAqC,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAC1D,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAC,QAAQ,CAAC;EAE1D,MAAMQ,gBAAgB,GAAIC,CAAuC,IAAK;IAClE,MAAMC,IAAI,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK;IAC3B;IACAR,MAAM,CAACS,KAAK,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,CAACC,aAAa,CAACL,IAAI,CAAC,CAACM,GAAG,CAAC,CAAC;IAChDT,eAAe,CAACG,IAAI,CAAC;EACzB,CAAC;EAED,oBACIR,OAAA;IAAAe,QAAA,gBACIf,OAAA;MAAOgB,OAAO,EAAC,YAAY;MAAAD,QAAA,EAAC;IAAY;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eAChDpB,OAAA;MAAQqB,EAAE,EAAC,YAAY;MAACX,KAAK,EAAEN,YAAa;MAACkB,QAAQ,EAAEhB,gBAAiB;MAAAS,QAAA,gBACpEf,OAAA;QAAQU,KAAK,EAAC,YAAY;QAAAK,QAAA,EAAC;MAAO;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC3CpB,OAAA;QAAQU,KAAK,EAAC,OAAO;QAAAK,QAAA,EAAC;MAAK;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACpCpB,OAAA;QAAQU,KAAK,EAAC,2BAA2B;QAAAK,QAAA,EAAC;MAAU;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC7DpB,OAAA;QAAQU,KAAK,EAAC,OAAO;QAAAK,QAAA,EAAC;MAAM;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACrCpB,OAAA;QAAQU,KAAK,EAAC,iBAAiB;QAAAK,QAAA,EAAC;MAAe;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACxDpB,OAAA;QAAQU,KAAK,EAAC,SAAS;QAAAK,QAAA,EAAC;MAAO;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEpC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEd,CAAC;AAACjB,EAAA,CAxBIF,UAAqC;AAAAsB,EAAA,GAArCtB,UAAqC;AA0B3C,eAAeA,UAAU;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}