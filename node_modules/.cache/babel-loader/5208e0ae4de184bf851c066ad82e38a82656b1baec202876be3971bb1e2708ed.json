{"ast":null,"code":"var _jsxFileName = \"/home/gleb/my_app_test/src/Custom/KeywordMarker.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { Tooltip } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst KeywordMarker = ({\n  keyword,\n  color,\n  duration,\n  currentTime,\n  zoomLevel,\n  canvasWidth,\n  canvasHeight,\n  isExpanded,\n  channelNumber,\n  onMarkerClick\n}) => {\n  _s();\n  const markerRef = useRef(null);\n  useEffect(() => {\n    if (markerRef.current) {\n      const visibleDuration = duration / zoomLevel;\n      const startTime = Math.max(0, currentTime - visibleDuration / 2);\n      const endTime = Math.min(duration, startTime + visibleDuration);\n      const markerPosition = (keyword.Start - startTime) / visibleDuration * canvasWidth;\n      const markerHeight = isExpanded && channelNumber === 2 ? canvasHeight / 2 : canvasHeight;\n      const markerTop = isExpanded && channelNumber === 2 && keyword.ChannelNumber === 2 ? canvasHeight / 2 : 0;\n      markerRef.current.style.left = `${markerPosition}px`;\n      markerRef.current.style.height = `${markerHeight}px`;\n      markerRef.current.style.top = `${markerTop}px`;\n      markerRef.current.style.display = keyword.Start >= startTime && keyword.Start <= endTime ? 'block' : 'none';\n    }\n  }, [keyword, currentTime, zoomLevel, canvasWidth, canvasHeight, isExpanded, channelNumber, duration]);\n  const handleClick = () => {\n    onMarkerClick(keyword.Start);\n  };\n  return (\n    /*#__PURE__*/\n    //   <Tooltip title={`${keyword.Name} (${keyword.Confidence.toFixed(2)})`} placement=\"top\">\n    _jsxDEV(Tooltip, {\n      title: `${keyword.Name} (${keyword.Start})`,\n      placement: \"top\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: markerRef,\n        onClick: handleClick,\n        style: {\n          position: 'absolute',\n          width: '2px',\n          backgroundColor: color,\n          cursor: 'pointer'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)\n  );\n};\n_s(KeywordMarker, \"x5wWyXK0+mHGg2Y0I8gN07knkVQ=\");\n_c = KeywordMarker;\nexport default KeywordMarker;\nvar _c;\n$RefreshReg$(_c, \"KeywordMarker\");","map":{"version":3,"names":["React","useEffect","useRef","Tooltip","jsxDEV","_jsxDEV","KeywordMarker","keyword","color","duration","currentTime","zoomLevel","canvasWidth","canvasHeight","isExpanded","channelNumber","onMarkerClick","_s","markerRef","current","visibleDuration","startTime","Math","max","endTime","min","markerPosition","Start","markerHeight","markerTop","ChannelNumber","style","left","height","top","display","handleClick","title","Name","placement","children","ref","onClick","position","width","backgroundColor","cursor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/gleb/my_app_test/src/Custom/KeywordMarker.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Tooltip } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { KeywordColor } from '../audio/AudioContext';\n\ninterface WordMarkerProps {\n    keyword: KeywordColor['keyword'];\n    color: string;\n    duration: number;\n    currentTime: number;\n    zoomLevel: number;\n    canvasWidth: number;\n    canvasHeight: number;\n    isExpanded: boolean;\n    channelNumber: number;\n    onMarkerClick: (time: number) => void;\n  }\n  \n  const KeywordMarker: React.FC<WordMarkerProps> = ({\n    keyword,\n    color,\n    duration,\n    currentTime,\n    zoomLevel,\n    canvasWidth,\n    canvasHeight,\n    isExpanded,\n    channelNumber,\n    onMarkerClick,\n  }) => {\n    const markerRef = useRef<HTMLDivElement>(null);\n  \n    useEffect(() => {\n      if (markerRef.current) {\n        const visibleDuration = duration / zoomLevel;\n        const startTime = Math.max(0, currentTime - visibleDuration / 2);\n        const endTime = Math.min(duration, startTime + visibleDuration);\n  \n        const markerPosition = ((keyword.Start - startTime) / visibleDuration) * canvasWidth;\n        const markerHeight = isExpanded && channelNumber === 2 ? canvasHeight / 2 : canvasHeight;\n        const markerTop = isExpanded && channelNumber === 2 && keyword.ChannelNumber === 2 ? canvasHeight / 2 : 0;\n  \n        markerRef.current.style.left = `${markerPosition}px`;\n        markerRef.current.style.height = `${markerHeight}px`;\n        markerRef.current.style.top = `${markerTop}px`;\n        markerRef.current.style.display = keyword.Start >= startTime && keyword.Start <= endTime ? 'block' : 'none';\n      }\n    }, [keyword, currentTime, zoomLevel, canvasWidth, canvasHeight, isExpanded, channelNumber, duration]);\n  \n    const handleClick = () => {\n      onMarkerClick(keyword.Start);\n    };\n  \n    return (\n    //   <Tooltip title={`${keyword.Name} (${keyword.Confidence.toFixed(2)})`} placement=\"top\">\n        <Tooltip title={`${keyword.Name} (${keyword.Start})`} placement=\"top\">\n        <div\n          ref={markerRef}\n          onClick={handleClick}\n          style={{\n            position: 'absolute',\n            width: '2px',\n            backgroundColor: color,\n            cursor: 'pointer',\n          }}\n        />\n      </Tooltip>\n    );\n  };\n\nexport default KeywordMarker;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,OAAO,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAiB1C,MAAMC,aAAwC,GAAGA,CAAC;EAChDC,OAAO;EACPC,KAAK;EACLC,QAAQ;EACRC,WAAW;EACXC,SAAS;EACTC,WAAW;EACXC,YAAY;EACZC,UAAU;EACVC,aAAa;EACbC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAMC,SAAS,GAAGhB,MAAM,CAAiB,IAAI,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACd,IAAIiB,SAAS,CAACC,OAAO,EAAE;MACrB,MAAMC,eAAe,GAAGX,QAAQ,GAAGE,SAAS;MAC5C,MAAMU,SAAS,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEb,WAAW,GAAGU,eAAe,GAAG,CAAC,CAAC;MAChE,MAAMI,OAAO,GAAGF,IAAI,CAACG,GAAG,CAAChB,QAAQ,EAAEY,SAAS,GAAGD,eAAe,CAAC;MAE/D,MAAMM,cAAc,GAAI,CAACnB,OAAO,CAACoB,KAAK,GAAGN,SAAS,IAAID,eAAe,GAAIR,WAAW;MACpF,MAAMgB,YAAY,GAAGd,UAAU,IAAIC,aAAa,KAAK,CAAC,GAAGF,YAAY,GAAG,CAAC,GAAGA,YAAY;MACxF,MAAMgB,SAAS,GAAGf,UAAU,IAAIC,aAAa,KAAK,CAAC,IAAIR,OAAO,CAACuB,aAAa,KAAK,CAAC,GAAGjB,YAAY,GAAG,CAAC,GAAG,CAAC;MAEzGK,SAAS,CAACC,OAAO,CAACY,KAAK,CAACC,IAAI,GAAI,GAAEN,cAAe,IAAG;MACpDR,SAAS,CAACC,OAAO,CAACY,KAAK,CAACE,MAAM,GAAI,GAAEL,YAAa,IAAG;MACpDV,SAAS,CAACC,OAAO,CAACY,KAAK,CAACG,GAAG,GAAI,GAAEL,SAAU,IAAG;MAC9CX,SAAS,CAACC,OAAO,CAACY,KAAK,CAACI,OAAO,GAAG5B,OAAO,CAACoB,KAAK,IAAIN,SAAS,IAAId,OAAO,CAACoB,KAAK,IAAIH,OAAO,GAAG,OAAO,GAAG,MAAM;IAC7G;EACF,CAAC,EAAE,CAACjB,OAAO,EAAEG,WAAW,EAAEC,SAAS,EAAEC,WAAW,EAAEC,YAAY,EAAEC,UAAU,EAAEC,aAAa,EAAEN,QAAQ,CAAC,CAAC;EAErG,MAAM2B,WAAW,GAAGA,CAAA,KAAM;IACxBpB,aAAa,CAACT,OAAO,CAACoB,KAAK,CAAC;EAC9B,CAAC;EAED;IAAA;IACA;IACItB,OAAA,CAACF,OAAO;MAACkC,KAAK,EAAG,GAAE9B,OAAO,CAAC+B,IAAK,KAAI/B,OAAO,CAACoB,KAAM,GAAG;MAACY,SAAS,EAAC,KAAK;MAAAC,QAAA,eACrEnC,OAAA;QACEoC,GAAG,EAAEvB,SAAU;QACfwB,OAAO,EAAEN,WAAY;QACrBL,KAAK,EAAE;UACLY,QAAQ,EAAE,UAAU;UACpBC,KAAK,EAAE,KAAK;UACZC,eAAe,EAAErC,KAAK;UACtBsC,MAAM,EAAE;QACV;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACK;EAAC;AAEd,CAAC;AAACjC,EAAA,CAlDIX,aAAwC;AAAA6C,EAAA,GAAxC7C,aAAwC;AAoDhD,eAAeA,aAAa;AAAC,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}